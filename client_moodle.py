import json
import requests
import numpy as np
import random
import os
from random import randint
######### DO NOT CHANGE ANYTHING IN THIS FILE ##################
API_ENDPOINT = 'http://10.4.21.147'
PORT = 3000
MAX_DEG = 11
TARGET_LENGTH=11

POPULATION_SIZE = 35
file = open("test.txt" , "a")
file2 = open("test1.txt" , "w")
ID='9wAwMbeZDb2T9n57mknTNdOYGuNbbe7PrPx3R7lvdilAjZzxcs'
THRESHOLD=1500000

#### functions that you can call
# def break_condition(population):
#     sum=0
#     for i in population:
#         sum=sum+i.fitness
#     sum=sum/POPULATION_SIZE
#     if sum < THRESHOLD:
#         return False
#     return True

def get_errors(id, vector):
    """
    returns python array of length 2 
    (train error and validation error)
    """
    for i in vector: assert -10<=abs(i)<=10
    assert len(vector) == MAX_DEG

    return json.loads(send_request(id, vector, 'geterrors'))

def submit(id, vector):
    """
    used to make official submission of your weight vector
    returns string "successfully submitted" if properly submitted.
    """
    for i in vector: assert -10<=abs(i)<=10
    assert len(vector) == MAX_DEG
    return send_request(id, vector, 'submit')

#### utility functions
def urljoin(root, port, path=''):
    root = root + ':' + str(port)
    if path: root = '/'.join([root.rstrip('/'), path.rstrip('/')])
    return root

def send_request(id, vector, path):
    api = urljoin(API_ENDPOINT, PORT, path)
    vector = json.dumps(vector)
    response = requests.post(api, data={'id':id, 'vector':vector}).text
    if "reported" in response:
        print(response)
        exit()

    return response




class Individual(object):
    def __init__(self,chromosome):
        global ID
        global file
        self.chromosome = chromosome
        self.err_value = get_errors(ID,self.chromosome)
        file.write(str(self.chromosome ))
        file.write(" ")
        file.write(str(self.err_value))
        file.write("\n")
        file2.write(str(self.chromosome ))
        file2.write(" ")
        file2.write(str(self.err_value))
        file2.write("\n")
        self.fitness = self.cal_fitness()


    def mate(self, par2):
        child_chromosome = []
        i=0
        for gp1, gp2 in zip(self.chromosome, par2.chromosome):
            prob = random.random()
            # if prob < 0.4:
            #     if prob < 0.0125:
            #         gene = random.uniform(-1.0,1.0)
            #         gp1=gp1+(gene*(1e-13))
            #     child_chromosome.append(gp1)
            # elif prob < 0.80:
            #     if prob < 0.4125:
            #         gene = random.uniform(-1.0,1.0)
            #         gp2=gp2+(gene*(1e-13))
            #     child_chromosome.append(gp2)
            # else:
            #     child_chromosome.append(random.uniform(0.0,20.0)-10)
            if prob < 0.5:
                if prob < 0.16:
                    # if gp1 < -8.8:
                    #     gene = random.uniform(-10.0,gp1+1.2)
                    # elif gp1 > 8.8:
                    #     gene = random.uniform(gp1-1.2,10.0)
                    # else:
                    #     gene = random.uniform(gp1-1.2,gp1+1.2)
                    # if prob < 0.066:
                    random_float=random.uniform(i+1,i+9)
                    gene=gp1+(randint(-9,9) + random.uniform(-0.999999999999999,0.999999999999999))/(10**random_float)
                    # else:
                    #     random_float=random.uniform(5,15)
                    #     gene=gp1+(random.uniform(-1,1))/(10**random_float)
                    # if i <3 :
                    #     if prob<0.5:
                    #         gene=random.uniform(-10.0,10.0)
                    #     else:
                    #         gene=gp1+random.random(-1,1)
                    if abs(gene)<=10:
                        gp1=gene
                child_chromosome.append(gp1)
            else:
                if prob < 0.66:
                    # if gp2 < -8.8:
                    #     gene = random.uniform(-10.0,gp2+1.2)
                    # elif gp2 > 8.8:
                    #     gene = random.uniform(gp2-1.2,10.0)
                    # else:
                    #     gene = random.uniform(gp2-1.2,gp2+1.2)
                    # if prob < 0.666:
                    random_float=random.uniform(i+1,i+9)
                    gene=gp2+(randint(-9,9) + random.uniform(-0.999999999999999,0.999999999999999))/(10**random_float)
                    # else:
                    #     random_float=random.uniform(5,15)
                    #     gene=gp2+(random.uniform(-1,1))/(10**random_float)
                    # if i <3 :
                    #     if prob<5.5:
                    #         gene=random.uniform(-10.0,10.0)
                    #     else:
                    #         gene=gp2+random.random(-1,1)
                    if abs(gene)<=10:
                        gp2=gene
                child_chromosome.append(gp2)
            # else:
            #     child_chromosome.append(random.uniform(0.0,20.0)-10)
            i=i+1
        return child_chromosome


    def probability(self):
        pass

    def cal_fitness(self):
        fitness = (self.err_value[0] + self.err_value[1]) 
        return fitness

def cal_min(a,b):
    if a<b:
        return a
    return b

def create_gnome():
    global TARGET_LENGTH
    gnome = [[-7.836019304743436, 1.721828521475464, -5.994260003978321, 0.04933903146360126, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-7.836019304743436, 1.9804091656220617, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978321, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978321, 0.04933903146360126, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768797865638e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978321, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.257724399897878, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846148674339024e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.128271655364124, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978423, 0.04933903146367728, 0.038108481576750876, 8.132366660970913e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.6331278923663266, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366664350214e-05, -6.018768797865638e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978423, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978423, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.9942600039784795, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366684905482e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.440732468304468, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846148674339024e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038695802102256e-11, -6.704733356106608e-12] ,[-6.582286044798396, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12]]
    gene = random.uniform(0.0,1.0)
    for i in range (len(gnome)):
        gnome[i]=gnome[i]+(gene*(1e-10))
        
    return gnome

# Driver code
def main():
    # print("la")
    global file

    global POPULATION_SIZE
    # first_individual=[0.0, 0.1240317450077846, -6.211941063144333, 0.04933903144709126, 0.03810848157715883, 8.132366097133624e-05, -6.018769160916912e-05, -1.251585565299179e-07, 3.484096383229681e-08, 4.1614924993407104e-11, -6.732420176902565e-12]
    population = []
    initial_models=[[-9.815941998026366, 9.875226048562334, -6.229782759468698, 0.04965055675118332, 0.03811490252406058, 8.594278924119909e-05, -6.0189802343853794e-05, -1.2449782125095553e-07, 3.484463860491784e-08, 3.865249331479596e-11, -6.704188255465936e-12] ,[-9.815941998026366, 9.897836430384112, -6.229782759468698, 0.04971045421957707, 0.038114901340895194, 8.61772770161288e-05, -6.018778152316162e-05, -1.2460171353119052e-07, 3.48449067858931e-08, 3.872185318710836e-11, -6.70465278114458e-12] ,[-9.825389228559299, 9.875226049790276, -6.22915588856843, 0.04971045421957707, 0.038114872530328914, 8.61772770161288e-05, -6.0187771815856254e-05, -1.246035592952958e-07, 3.4844909098294586e-08, 3.872185318710836e-11, -6.704656667906582e-12] ,[-9.815941998026366, 9.897836430776154, -6.230824088721194, 0.04965055675419204, 0.038114872530328914, 8.61772770161288e-05, -6.019494169141301e-05, -1.2460171353119052e-07, 3.484477613889465e-08, 3.872473111085051e-11, -6.704655354092263e-12] ,[-9.825389228559299, 9.875226059621548, -6.22915588856843, 0.04971045421957707, 0.03811490252406058, 8.62330263908035e-05, -6.018776879130751e-05, -1.246035592952958e-07, 3.4844909098294586e-08, 3.872185318710836e-11, -6.704656667906582e-12] ,[-9.7907235652277, 9.939084639782502, -6.2291559109980845, 0.0496505397982168, 0.03811397216812192, 8.61772770161288e-05, -6.019494169141301e-05, -1.2456609565729236e-07, 3.4844909098294586e-08, 3.872185318710836e-11, -6.704655354092263e-12] ,[-9.791373819371469, 9.87522321586777, -6.229996369940933, 0.04965053970889593, 0.038114872530328914, 8.617720110506278e-05, -6.0184321009191686e-05, -1.246035069873775e-07, 3.4844909098294586e-08, 3.872185318710836e-11, -6.705231688580606e-12] ,[-9.78747785363159, 9.875225337240556, -6.229155887836615, 0.04971045421957707, 0.03811397216812192, 8.61772770161288e-05, -6.019494169141301e-05, -1.2455213850954727e-07, 3.4844909098294586e-08, 3.872185318710836e-11, -6.7040511309524395e-12] ,[-9.815942037866474, 9.897836430776154, -6.230824088721194, 0.0496505397982168, 0.038114872530328914, 8.61772770161288e-05, -6.019494169141301e-05, -1.2456609426404754e-07, 3.4844775467483105e-08, 3.872185318710836e-11, -6.704660325058993e-12] ,[-9.7874778555316, 9.875226049790276, -6.230015706701234, 0.04965053979880068, 0.03811490252406058, 8.617720148992431e-05, -6.0189788767225616e-05, -1.245510630891586e-07, 3.4844909098294586e-08, 3.872185318710836e-11, -6.7047171794839855e-12] ,[-9.78747785363159, 9.875226049790276, -6.229155887836615, 0.04965053980215927, 0.03811670746462311, 8.617720110506278e-05, -6.019494169141301e-05, -1.2455213850954727e-07, 3.4844909098294586e-08, 3.872185318710836e-11, -6.7047171794839855e-12] ,[-9.785969184163951, 9.875226049790276, -6.229996369940933, 0.04965053980215927, 0.03811490252406058, 8.617720110506278e-05, -6.0189788767225616e-05, -1.2455213850954727e-07, 3.4844909098294586e-08, 3.872185318710836e-11, -6.704655354092263e-12] ,[-9.78747785363159, 9.875226049790276, -6.229155887836615, 0.04971045421957707, 0.038114872530328914, 8.61772770161288e-05, -6.019494169141301e-05, -1.2455213850954727e-07, 3.4844909098294586e-08, 3.872185318710836e-11, -6.7047171794839855e-12] ,[-9.785969184163951, 9.875226049790276, -6.229984296528406, 0.04965053979880068, 0.03811490252406058, 8.617720102717445e-05, -6.0189788767225616e-05, -1.245513066963262e-07, 3.4844909098294586e-08, 3.872185318710836e-11, -6.704655354092263e-12] ,[-9.785968683355517, 9.875226049790276, -6.229984296528406, 0.04965053979880068, 0.03811490252406058, 8.617720102717445e-05, -6.0189788767225616e-05, -1.2455109268855007e-07, 3.4844909098294586e-08, 3.872185318710836e-11, -6.704655354092263e-12] ,[-9.785968678905325, 9.875225930183282, -6.229996369940933, 0.04965053980215927, 0.03811487127857209, 8.617720110506278e-05, -6.019494169141301e-05, -1.245521476050943e-07, 3.4844909098294586e-08, 3.872185318710836e-11, -6.704655354092263e-12] ,[-9.785968678905325, 9.875226049790276, -6.229996369940933, 0.04965053980215927, 0.038114872530328914, 8.617720110506278e-05, -6.019494169141301e-05, -1.2455213850954727e-07, 3.4844909098294586e-08, 3.872185318710836e-11, -6.704655354092263e-12] ,[-9.751546719844919, 9.875226049790276, -6.229996369940933, 0.04965053980215927, 0.038114872530328914, 8.617720110506278e-05, -6.019494169141301e-05, -1.2455213850954727e-07, 3.4844909098294586e-08, 3.872185318710836e-11, -6.704655354092263e-12] ,[-9.785969184163951, 9.875226049790276, -6.229996369940933, 0.04965053980215927, 0.0381149023918726, 8.5942845366322e-05, -6.0189788781373276e-05, -1.2455213850954727e-07, 3.4844917870161985e-08, 3.872185318710836e-11, -6.7047171794839855e-12] ,[-9.815941998026366, 9.875226048562334, -6.229782759468698, 0.04965055675419204, 0.03811490252406058, 8.594278924119909e-05, -6.0189788767225616e-05, -1.2460171353119052e-07, 3.4844909098294586e-08, 3.8712877013917696e-11, -6.704497889696219e-12] ,[-9.870591201355913, 9.89783644599137, -6.230789379438657, 0.04965053980215927, 0.03811490252342649, 8.61772006253837e-05, -6.018980465760291e-05, -1.2455213850954727e-07, 3.4844909098294586e-08, 3.872185318710836e-11, -6.706187039200964e-12] ,[-9.787477774186927, 9.875226049790276, -6.229628959027698, 0.04971045421957707, 0.03811490130148471, 8.594281285192035e-05, -6.01876234109303e-05, -1.2460350786326293e-07, 3.48448055778436e-08, 3.875338101800248e-11, -6.705461258601888e-12] ,[-9.785969184163951, 9.875226049790276, -6.229782759468698, 0.04971045421957707, 0.03811486863416908, 8.594284299080966e-05, -6.019496569686583e-05, -1.2449782125095553e-07, 3.484497351155861e-08, 3.872185318710836e-11, -6.7047171794839855e-12] ,[-9.787477774186927, 9.875226049790276, -6.229155887836615, 0.04971045421957707, 0.03811387991521223, 8.594281285192035e-05, -6.018762346963929e-05, -1.246035069873775e-07, 3.4844908962150915e-08, 3.875327868393456e-11, -6.705461258601888e-12] ,[-9.878055586434591, 9.89783644599137, -6.229782759468698, 0.049650539782069986, 0.03811490130148471, 8.594284300103703e-05, -6.018762332532652e-05, -1.2460355957687842e-07, 3.484497351155861e-08, 3.875338101800248e-11, -6.705461258601888e-12] ,[-9.787477774186927, 9.89783644599137, -6.229782759468698, 0.049650539782069986, 0.03811490130148471, 8.594281285192035e-05, -6.01876234109303e-05, -1.2460350786326293e-07, 3.48448055778436e-08, 3.875338101800248e-11, -6.705461258601888e-12] ,[-9.791373819371469, 9.89783644599137, -6.229782759468698, 0.04965055675419204, 0.03811490130148471, 8.594284300103703e-05, -6.0187769975250136e-05, -1.2460355957687842e-07, 3.484497351155861e-08, 3.875338101800248e-11, -6.705461258601888e-12] ,[-9.791373819371469, 9.875226049790276, -6.229410031241821, 0.049650543700508296, 0.03811629336159557, 8.617720110506278e-05, -6.01878089532992e-05, -1.2460350786326293e-07, 3.4844907962961574e-08, 3.875327868393456e-11, -6.7054567243700564e-12] ,[-9.78747785363159, 9.875225337240556, -6.229155887836615, 0.04971058987829229, 0.03811397268886604, 8.61772770161288e-05, -6.019494169141301e-05, -1.2455213850954727e-07, 3.4844909098294586e-08, 3.872186235429981e-11, -6.705390252496784e-12] ,[-9.678392611280275, 9.89783644599137, -6.229782759468698, 0.049650539782069986, 0.03811487508778469, 8.594281319183566e-05, -6.0187806838148415e-05, -1.2460399120889338e-07, 3.484497351155861e-08, 3.875946384604785e-11, -6.705461258601888e-12] ,[-9.78597419369531, 9.89783644599137, -6.229782759468698, 0.04965053980215927, 0.03810515451265022, 8.617720110506278e-05, -6.0189788767225616e-05, -1.2460350786326293e-07, 3.484497351155861e-08, 3.875327868393456e-11, -6.704655354092263e-12] ,[-9.78747785363159, 9.875226049790276, -6.230016428409186, 0.04971045421957707, 0.038114872530328914, 8.617720148992431e-05, -6.019495757470341e-05, -1.246035069873775e-07, 3.484248858148658e-08, 3.872185318710836e-11, -6.7047171794839855e-12] ,[-9.787477774186927, 9.89783644599137, -6.229782759468698, 0.049650539782069986, 0.03811490130148471, 8.594281281506513e-05, -6.0187806989673895e-05, -1.2460399120889338e-07, 3.48448055778436e-08, 3.875338101800248e-11, -6.704655354092263e-12] ,[-9.785969184163951, 9.875226049790276, -6.229996369940933, 0.04951385636187864, 0.038114872530328914, 8.642661919422048e-05, -6.019494169141301e-05, -1.2455213850954727e-07, 3.4844909098294586e-08, 3.872185318710836e-11, -6.7047171794839855e-12] ,[-9.815941998026366, 9.897836305302773, -6.22940983463891, 0.049650539782069986, 0.03811490130148471, 8.594281188684408e-05, -6.018778152316162e-05, -1.2460399120889338e-07, 3.48449067858931e-08, 3.875338101800248e-11, -6.704655354092263e-12]]
    for i in initial_models:
        population.append(Individual(i))
    # population.append(Individual(first_individual))
    generation=0
    # while(len(population)<POPULATION_SIZE):
    #     x=create_gnome()
    #     population.append(Individual(x))
    # population = sorted(population, key = lambda x:x.fitness)
    # temp=5
    # while(temp):
    while(1):
        population = sorted(population, key = lambda x:x.fitness)
        child_population = []
        ## for adding the individuals with least fitness score. We need to sort based on fitness score??
        # child_population.extend(population[:5]) 
        probablity_array=[]
        fitness_sum=0
        for i in range(int((50*POPULATION_SIZE)/100)):
            fitness_sum=fitness_sum+population[i].fitness
        for i in range(int((50*POPULATION_SIZE)/100)):
            probablity_array.append(fitness_sum/population[i].fitness)
        for _ in range(int((90*POPULATION_SIZE)/100)): 
            # parents = random.choices(population[:int((50*POPULATION_SIZE)/100)],weights=probablity_array,cum_weights=None,k=2)
            parents=[]
            parents.append(random.choice(population[:int((50*POPULATION_SIZE)/100)]))
            parents.append(random.choice(population[:int((50*POPULATION_SIZE)/100)]))
            child = parents[0].mate(parents[1])
            child_population.append(Individual(child))

        for i in range((POPULATION_SIZE-int((90*POPULATION_SIZE)/100))):
            child_population.append(population[i])
        for i in range(int((20*POPULATION_SIZE)/100)):
            print(str(i)+str(len(child_population))+str(len(population))+submit(ID,population[i].chromosome))

        population = child_population
        # temp=temp-1
        generation=generation+1
        print(generation,end=' ')
        # print(probablity_array)

if __name__ == '__main__': 
    main()