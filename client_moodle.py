import json
import requests
import numpy as np
import random
import os

######### DO NOT CHANGE ANYTHING IN THIS FILE ##################
API_ENDPOINT = 'http://10.4.21.147'
PORT = 3000
MAX_DEG = 11
TARGET_LENGTH=11

POPULATION_SIZE = 35
file = open("test2.txt" , "a")
ID='9wAwMbeZDb2T9n57mknTNdOYGuNbbe7PrPx3R7lvdilAjZzxcs'
THRESHOLD=1500000

#### functions that you can call
def break_condition(population):
    sum=0
    for i in population:
        sum=sum+i.fitness
    sum=sum/POPULATION_SIZE
    if sum < THRESHOLD:
        return False
    return True

def get_errors(id, vector):
    """
    returns python array of length 2 
    (train error and validation error)
    """
    for i in vector: assert -10<=abs(i)<=10
    assert len(vector) == MAX_DEG

    return json.loads(send_request(id, vector, 'geterrors'))

def submit(id, vector):
    """
    used to make official submission of your weight vector
    returns string "successfully submitted" if properly submitted.
    """
    for i in vector: assert -10<=abs(i)<=10
    assert len(vector) == MAX_DEG
    return send_request(id, vector, 'submit')

#### utility functions
def urljoin(root, port, path=''):
    root = root + ':' + str(port)
    if path: root = '/'.join([root.rstrip('/'), path.rstrip('/')])
    return root

def send_request(id, vector, path):
    api = urljoin(API_ENDPOINT, PORT, path)
    vector = json.dumps(vector)
    response = requests.post(api, data={'id':id, 'vector':vector}).text
    if "reported" in response:
        print(response)
        exit()

    return response




class Individual(object):
    def __init__(self,chromosome):
        global ID
        global file
        self.chromosome = chromosome
        self.err_value = get_errors(ID,self.chromosome)
        file.write(str(self.chromosome ))
        file.write(" ")
        file.write(str(self.err_value))
        file.write("\n")
        self.fitness = self.cal_fitness()


    def mate(self, par2):
        child_chromosome = []
        for gp1, gp2 in zip(self.chromosome, par2.chromosome):
            prob = random.random()
            if prob < 0.4:
                if prob < 0.0125:
                    gene = random.uniform(-1.0,1.0)
                    gp1=gp1+(gene*(1e-13))
                child_chromosome.append(gp1)
            elif prob < 0.80:
                if prob < 0.4125:
                    gene = random.uniform(-1.0,1.0)
                    gp2=gp2+(gene*(1e-13))
                child_chromosome.append(gp2)
            else:
                child_chromosome.append(random.uniform(0.0,20.0)-10)
        return child_chromosome


    def probability(self):
        pass

    def cal_fitness(self):
        fitness = (self.err_value[0] + self.err_value[1]) + (abs(self.err_value[0] - self.err_value[1]))
        return fitness


def create_gnome():
    global TARGET_LENGTH
    gnome = [0.0, 0.1240317450077846, -6.211941063144333, 0.04933903144709126, 0.03810848157715883, 8.132366097133624e-05, -6.018769160916912e-05, -1.251585565299179e-07, 3.484096383229681e-08, 4.1614924993407104e-11, -6.732420176902565e-12]
    gene = random.uniform(0.0,1.0)
    for i in range (len(gnome)):
        gnome[i]=gnome[i]+(gene*(1e-10))
        
    return gnome

# Driver code
def main():
    # print("la")
    global file

    global POPULATION_SIZE
    # first_individual=[0.0, 0.1240317450077846, -6.211941063144333, 0.04933903144709126, 0.03810848157715883, 8.132366097133624e-05, -6.018769160916912e-05, -1.251585565299179e-07, 3.484096383229681e-08, 4.1614924993407104e-11, -6.732420176902565e-12]
    population = []
    initial_models=[[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366684905482e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 4.080744010954511, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366674054504e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 4.080744010954511, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 4.080744010954511, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366689322914e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-5.2559463206155925, 4.080744010954511, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366674054504e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[4.6610612453840865, 0.5624604167944831, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366674054504e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[0.569885465868289, 4.080744010954445, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366674054504e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[0.569885465868289, 4.080744010954511, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366674054504e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[1.0126295803305858, 4.080744010954511, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[3.4913008051430676, 4.080744010954511, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366674054504e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[4.6610612453840865, 4.080744010954511, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366674054504e-05, -6.018768799848978e-05, -1.2515492486747034e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[4.150248348954982, 4.0970934747052095, -5.994260003978408, 0.04933903146367728, 0.03810848157694432, 8.132366672705912e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484605966697868e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[5.769750037074903, 4.080744010954511, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366684905482e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[8.732198103171207, 4.080744010954511, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[9.587310850751532, 4.080744010954511, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366674054504e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[9.587310850751532, 4.080744010954511, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[4.150248348954982, 4.0970934747052095, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366672705912e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484605966697868e-08, 4.042196998683918e-11, -6.704733356106608e-12] ,[-2.4592508614506965, -0.2039007974548479, -5.870007530036536, 0.04933903146367728, 0.038108481576750876, 8.132366672705912e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.7133300475315566e-12] ,[-2.4592508614506965, -0.2039007974548479, -5.870007530036536, 0.04933903146367728, 0.038108481576750876, 8.132366672705912e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484605966697868e-08, 4.038447256077998e-11, -6.7133300475315566e-12] ,[-2.4592508614506965, 1.181502682696971, -5.870007530036536, 0.04933903146367728, 0.03810848157694432, 8.132366672705912e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484605966697868e-08, 4.038447256077998e-11, -6.7133300475315566e-12] ,[-2.4592508614506965, -0.6700847959886644, -5.870007530036536, 0.04933903146367728, 0.038108481576750876, 8.132366674054504e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.7133300475315566e-12] ,[-0.9176655784285082, 1.181502682696971, -5.870007530036536, 0.04933903146367728, 0.03810848157694432, 8.132366672705912e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484605966697868e-08, 4.038447256077998e-11, -6.7133300475315566e-12] ,[-9.795538493912362, 2.6852016461900785, -5.870007530036536, 0.04933903146367728, 0.03810848157694432, 8.132366683931331e-05, -6.0187688042701784e-05, -1.251549100085057e-07, 3.484605966697868e-08, 4.038447256077998e-11, -6.7133300475315566e-12] ,[3.6806046134649257, -0.6700847959886644, -5.870007530036536, 0.04933903146367728, 0.038108481576750876, 8.132366672705912e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.7133300475315566e-12] ,[3.6806046134649257, -0.6700847959886644, -5.870007530036536, 0.04933903146367728, 0.038108481576750876, 8.132366674054504e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.7133300475315566e-12] ,[-2.4592508614506965, 2.7120824152237653, -5.870007530036536, 0.04933903146367728, 0.038108481576750876, 8.132366674054504e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.7133300475315566e-12] ,[-2.4592508614506965, 2.7120824152237653, -5.870007530036536, 0.04933903146367728, 0.03810848157694432, 8.132366674054504e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484605966697868e-08, 4.038447256077998e-11, -6.7133300475315566e-12] ,[-2.4592508614506965, -2.1317043963116618, -5.870007530036536, 0.04933903146367728, 0.03810848157694432, 8.132366672705912e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.7133300475315566e-12] ,[-2.4592508614506965, 4.0807440109546, -5.870007530036536, 0.04933903146367728, 0.038108481576750876, 8.132366672705912e-05, -6.018768800104422e-05, -1.2515484780288052e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.7133300475315566e-12] ,[-2.4592508614506965, -0.6700847959886644, -5.870007530036536, 0.04933903146367728, 0.038108481576750876, 8.132366674054504e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.042317424842398e-11, -6.7133300475315566e-12] ,[-2.4592508614506965, -0.6700847959886644, -5.870007530036536, 0.04933903146367728, 0.03810848157694432, 8.132366672705912e-05, -6.018768802236534e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.042317424842398e-11, -6.7133300475315566e-12] ,[-9.795538493912362, 4.636681471711244, -5.994260003978408, 0.04933903146367728, 0.03810848157694432, 8.132366674054504e-05, -6.018768808357727e-05, -1.251549100085057e-07, 3.484614501098056e-08, 4.05010094314358e-11, -6.704733356106608e-12] ,[9.587310850751532, 9.443514474066152, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12]]
    for i in initial_models:
        population.append(Individual(i))
    # population.append(Individual(first_individual))
    generation=0
    # while(len(population)<POPULATION_SIZE):
    #     x=create_gnome()
    #     population.append(Individual(x))
    # population = sorted(population, key = lambda x:x.fitness)
    # temp=5
    # while(temp):
    while(break_condition(population)):
        population = sorted(population, key = lambda x:x.fitness)
        child_population = []
        ## for adding the individuals with least fitness score. We need to sort based on fitness score??
        # child_population.extend(population[:5]) 
        probablity_array=[]
        fitness_sum=0
        for i in range(int((50*POPULATION_SIZE)/100)):
            fitness_sum=fitness_sum+population[i].fitness

        for i in range(int((50*POPULATION_SIZE)/100)):
            probablity_array.append(fitness_sum/population[i].fitness)
            
        for _ in range(int((80*POPULATION_SIZE)/100)): 
            parents = random.choices(population[:int((50*POPULATION_SIZE)/100)],weights=probablity_array,cum_weights=None,k=2)
            # parent2 = random.choice(population[:int((50*POPULATION_SIZE)/100)])
            child = parents[0].mate(parents[1])
            child_population.append(Individual(child))

        for i in range((POPULATION_SIZE-int((80*POPULATION_SIZE)/100))):
            child_population.append(population[i])
        for i in range((POPULATION_SIZE-int((90*POPULATION_SIZE)/100))):
            submit(ID,population[i].chromosome)

        population = child_population
        # temp=temp-1
        generation=generation+1
        print(generation,end=' ')
        print(probablity_array)

if __name__ == '__main__': 
    main()