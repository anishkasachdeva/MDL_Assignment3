import json
import requests
import numpy as np
import random
import os
from random import randint
######### DO NOT CHANGE ANYTHING IN THIS FILE ##################
API_ENDPOINT = 'http://10.4.21.147'
PORT = 3000
MAX_DEG = 11
TARGET_LENGTH=11

POPULATION_SIZE = 35
file = open("test.txt" , "a")
file2 = open("test1.txt" , "w")
ID='9wAwMbeZDb2T9n57mknTNdOYGuNbbe7PrPx3R7lvdilAjZzxcs'
THRESHOLD=1500000

#### functions that you can call
# def break_condition(population):
#     sum=0
#     for i in population:
#         sum=sum+i.fitness
#     sum=sum/POPULATION_SIZE
#     if sum < THRESHOLD:
#         return False
#     return True

def get_errors(id, vector):
    """
    returns python array of length 2 
    (train error and validation error)
    """
    for i in vector: assert -10<=abs(i)<=10
    assert len(vector) == MAX_DEG

    return json.loads(send_request(id, vector, 'geterrors'))

def submit(id, vector):
    """
    used to make official submission of your weight vector
    returns string "successfully submitted" if properly submitted.
    """
    for i in vector: assert -10<=abs(i)<=10
    assert len(vector) == MAX_DEG
    return send_request(id, vector, 'submit')

#### utility functions
def urljoin(root, port, path=''):
    root = root + ':' + str(port)
    if path: root = '/'.join([root.rstrip('/'), path.rstrip('/')])
    return root

def send_request(id, vector, path):
    api = urljoin(API_ENDPOINT, PORT, path)
    vector = json.dumps(vector)
    response = requests.post(api, data={'id':id, 'vector':vector}).text
    if "reported" in response:
        print(response)
        exit()

    return response




class Individual(object):
    def __init__(self,chromosome):
        global ID
        global file
        self.chromosome = chromosome
        self.err_value = get_errors(ID,self.chromosome)
        file.write(str(self.chromosome ))
        file.write(" ")
        file.write(str(self.err_value))
        file.write("\n")
        file2.write(str(self.chromosome ))
        file2.write(" ")
        file2.write(str(self.err_value))
        file2.write("\n")
        self.fitness = self.cal_fitness()


    def mate(self, par2):
        child_chromosome = []
        i = 0
        for gp1, gp2 in zip(self.chromosome, par2.chromosome):
            prob = random.random()
            # if prob < 0.4:
            #     if prob < 0.0125:
            #         gene = random.uniform(-1.0,1.0)
            #         gp1=gp1+(gene*(1e-13))
            #     child_chromosome.append(gp1)
            # elif prob < 0.80:
            #     if prob < 0.4125:
            #         gene = random.uniform(-1.0,1.0)
            #         gp2=gp2+(gene*(1e-13))
            #     child_chromosome.append(gp2)
            # else:
            #     child_chromosome.append(random.uniform(0.0,20.0)-10)
            if prob < 0.5:
                if prob < 0.15:
                    # if gp1 < -8.8:
                    #     gene = random.uniform(-10.0,gp1+1.2)
                    # elif gp1 > 8.8:
                    #     gene = random.uniform(gp1-1.2,10.0)
                    # else:
                    #     gene = random.uniform(gp1-1.2,gp1+1.2)
                    # if prob < 0.066:
                    random_float = random.uniform(i+1,i+7)
                    gene = gp1 + (randint(-9,9) + random.uniform(-0.999999999999999,0.999999999999999))/(10**random_float)
                    # else:
                    #     random_float=random.uniform(5,15)
                    #     gene=gp1+(random.uniform(-1,1))/(10**random_float)
                    # if i <3 :
                    #     if prob<0.5:
                    #         gene=random.uniform(-10.0,10.0)
                    #     else:
                    #         gene=gp1+random.random(-1,1)
                    if abs(gene) <= 10:
                        gp1 = gene
                child_chromosome.append(gp1)
            else:
                if prob < 0.65:
                    # if gp2 < -8.8:
                    #     gene = random.uniform(-10.0,gp2+1.2)
                    # elif gp2 > 8.8:
                    #     gene = random.uniform(gp2-1.2,10.0)
                    # else:
                    #     gene = random.uniform(gp2-1.2,gp2+1.2)
                    # if prob < 0.666:
                    random_float = random.uniform(i+1,i+7)
                    gene = gp2 + (randint(-9,9) + random.uniform(-0.999999999999999,0.999999999999999))/(10**random_float)
                    # else:
                    #     random_float=random.uniform(5,15)
                    #     gene=gp2+(random.uniform(-1,1))/(10**random_float)
                    # if i <3 :
                    #     if prob<5.5:
                    #         gene=random.uniform(-10.0,10.0)
                    #     else:
                    #         gene=gp2+random.random(-1,1)
                    if abs(gene) <= 10:
                        gp2 = gene
                child_chromosome.append(gp2)
            # else:
            #     child_chromosome.append(random.uniform(0.0,20.0)-10)
            i=i+1
        return child_chromosome


    def probability(self):
        pass

    def cal_fitness(self):
        fitness = (self.err_value[0] + self.err_value[1]) 
        return fitness

def cal_min(a,b):
    if a<b:
        return a
    return b

def create_gnome():
    global TARGET_LENGTH
    gnome = [[-7.836019304743436, 1.721828521475464, -5.994260003978321, 0.04933903146360126, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-7.836019304743436, 1.9804091656220617, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978321, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978321, 0.04933903146360126, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768797865638e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978321, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.257724399897878, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846148674339024e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.128271655364124, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978423, 0.04933903146367728, 0.038108481576750876, 8.132366660970913e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.6331278923663266, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366664350214e-05, -6.018768797865638e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978423, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978423, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.9942600039784795, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366684905482e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.440732468304468, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846148674339024e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038695802102256e-11, -6.704733356106608e-12] ,[-6.582286044798396, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12]]
    gene = random.uniform(0.0,1.0)
    for i in range (len(gnome)):
        gnome[i]=gnome[i]+(gene*(1e-10))
        
    return gnome

# Driver code
def main():
    # print("la")
    global file

    global POPULATION_SIZE
    # first_individual=[0.0, 0.1240317450077846, -6.211941063144333, 0.04933903144709126, 0.03810848157715883, 8.132366097133624e-05, -6.018769160916912e-05, -1.251585565299179e-07, 3.484096383229681e-08, 4.1614924993407104e-11, -6.732420176902565e-12]
    population = []
    initial_models=[[-9.77815421280399, 9.839578792164117, -6.233477530985998, 0.04937346759530822, 0.038113567881252634, 8.261764800051296e-05, -6.018366391935756e-05, -1.2511863342010896e-07, 3.4844566471991513e-08, 3.97892163643576e-11, -6.704592426928603e-12] ,[-9.77815421280399, 9.839578792164117, -6.233385805148822, 0.04936471235510118, 0.038113567881252634, 8.261764800051296e-05, -6.0187634201831986e-05, -1.2522532348537086e-07, 3.4846131421423765e-08, 3.981006385045192e-11, -6.704592426928603e-12] ,[-9.781275222702572, 9.839578792164117, -6.23348274422012, 0.04937304471975574, 0.038113570476712835, 8.261764800051296e-05, -6.0187634201831986e-05, -1.2542388949657822e-07, 3.484647533329878e-08, 3.981006385045192e-11, -6.70454435602959e-12] ,[-9.78076652475232, 9.839578628443055, -6.2334353979759705, 0.04937304471975574, 0.038113570476712835, 8.261764800051296e-05, -6.0187634201831986e-05, -1.254272642555962e-07, 3.484647533329878e-08, 3.9828407818576795e-11, -6.70454435602959e-12] ,[-9.779750278530502, 9.839578792164117, -6.233413701657839, 0.04937304471975574, 0.03811321634158516, 8.258890986463786e-05, -6.0187634201831986e-05, -1.2511693629463236e-07, 3.4846131421423765e-08, 3.981006385045192e-11, -6.704592426928603e-12] ,[-9.781276941505288, 9.839578792164117, -6.233412430204002, 0.04937304471975574, 0.038113570476712835, 8.261764800051296e-05, -6.0187634201831986e-05, -1.2511693629463236e-07, 3.4846131421423765e-08, 3.981006385045192e-11, -6.704592426928603e-12] ,[-9.77815421280399, 9.839578792164117, -6.233408019776481, 0.04937304471975574, 0.038113570476712835, 8.261764800051296e-05, -6.0187634201831986e-05, -1.2511693629463236e-07, 3.4846131421423765e-08, 3.981006385045192e-11, -6.704592426928603e-12] ,[-9.781276941505288, 9.839578792164117, -6.233413701657839, 0.04937304471975574, 0.038113570476712835, 8.261764800051296e-05, -6.0187634201831986e-05, -1.2511693629463236e-07, 3.484647533329878e-08, 3.981006385045192e-11, -6.704592426928603e-12] ,[-9.78127645401623, 9.840613991618689, -6.233413701657839, 0.04936479674992627, 0.038113570476712835, 8.261750634927913e-05, -6.0187634201831986e-05, -1.25113026426752e-07, 3.4846131421423765e-08, 3.981006385045192e-11, -6.704534074612445e-12] ,[-9.781276941505288, 9.839578792164117, -6.233413701657839, 0.04937304471975574, 0.038113570476712835, 8.261764800051296e-05, -6.018724357104989e-05, -1.2511693629463236e-07, 3.484647533329878e-08, 3.981006385045192e-11, -6.704592426928603e-12] ,[-9.77815421280399, 9.840613991618689, -6.233408019776481, 0.04936479674992627, 0.038113567881252634, 8.261764800051296e-05, -6.018496213659436e-05, -1.2511367943976062e-07, 3.4846131421423765e-08, 3.981006385045192e-11, -6.704592426928603e-12] ,[-9.77815421280399, 9.843530091514516, -6.2334353979759705, 0.04937304471975574, 0.038118124736488006, 8.212258190817435e-05, -6.0187634201831986e-05, -1.2511730695671672e-07, 3.4844646341493e-08, 3.978503657516988e-11, -6.70454435602959e-12] ,[-9.777707204405862, 9.843530091514516, -6.233477530985998, 0.04937346759530822, 0.03811813591929794, 8.21199219831958e-05, -6.018366391935756e-05, -1.2511863342010896e-07, 3.4844566471991513e-08, 3.978503657516988e-11, -6.70454435602959e-12] ,[-9.777805062292872, 9.843530091514516, -6.233444337818862, 0.04937343657719518, 0.03811382828526399, 8.212304599142838e-05, -6.018365555631565e-05, -1.2511730067779349e-07, 3.484634745717913e-08, 3.981006385045192e-11, -6.7056666293586995e-12] ,[-9.777357668250954, 9.846770625875543, -6.23348274422012, 0.04937346759530822, 0.03811357763360351, 8.211807494571665e-05, -6.0183657317811736e-05, -1.2510883526180224e-07, 3.4844566471991513e-08, 3.981006385045192e-11, -6.704881114626132e-12] ,[-9.78126175608382, 9.843530091514516, -6.2334357447898165, 0.04937176912487429, 0.03811382828526399, 8.212032851752934e-05, -6.018365555631565e-05, -1.2511730067779349e-07, 3.484634745717913e-08, 3.981006385045192e-11, -6.7056666293586995e-12] ,[-9.781273143458895, 9.843530091514516, -6.233478821385673, 0.049363232946074934, 0.03811813591929794, 8.21199219831958e-05, -6.018365555631565e-05, -1.2511730695671672e-07, 3.4844566471991513e-08, 3.978503657516988e-11, -6.70454435602959e-12] ,[-9.77814799002221, 9.846801105680425, -6.233478917783702, 0.049366279970565696, 0.038115367718869975, 8.211807494571665e-05, -6.0183657317811736e-05, -1.2511863342010896e-07, 3.4844566471991513e-08, 3.981006385045192e-11, -6.704881114626132e-12] ,[-9.777805062292872, 9.843530091514516, -6.233478917783702, 0.04937346759530822, 0.03811382828526399, 8.212032851752934e-05, -6.018365555631565e-05, -1.2511863342010896e-07, 3.4844566471991513e-08, 3.981006385045192e-11, -6.704881114626132e-12] ,[-9.777805062292872, 9.843530091514516, -6.233478917783702, 0.04937343657719518, 0.03811382828526399, 8.212304903879589e-05, -6.018365555631565e-05, -1.2511863342010896e-07, 3.4844566471991513e-08, 3.981006385045192e-11, -6.70454435602959e-12] ,[-9.781275222702572, 9.843530091514516, -6.23348274422012, 0.04937346759530822, 0.038113570476712835, 8.212032851752934e-05, -6.018365555631565e-05, -1.2511693629463236e-07, 3.4844566471991513e-08, 3.981006385045192e-11, -6.70454435602959e-12] ,[-9.777805062292872, 9.843520903211344, -6.2334357447898165, 0.04937343657719518, 0.038113807536932685, 8.212032851752934e-05, -6.018365555631565e-05, -1.2511730067779349e-07, 3.4844566471991513e-08, 3.981006385045192e-11, -6.70454435602959e-12] ,[-9.78126175608382, 9.83958139482051, -6.233478821385673, 0.04937187696550633, 0.03811215091192951, 8.212032851752934e-05, -6.018365555631565e-05, -1.2511677935190115e-07, 3.484614554608026e-08, 3.981006385045192e-11, -6.7056666293586995e-12] ,[-9.763484577374612, 9.840578875664713, -6.233478917783702, 0.04937187696550633, 0.03811215091192951, 8.212032851752934e-05, -6.018365555631565e-05, -1.2511710172491363e-07, 3.4844566471991513e-08, 3.981006385045192e-11, -6.704881114626132e-12] ,[-9.78126175608382, 9.840579808749421, -6.233478821385673, 0.04937174954861204, 0.038113886660085965, 8.211975849232387e-05, -6.018365555631565e-05, -1.2511730695671672e-07, 3.4847771349160704e-08, 3.981006385045192e-11, -6.7056666293586995e-12] ,[-9.77815421280399, 9.841131541700952, -6.2334353979759705, 0.04937304471975574, 0.03811382815536114, 8.212258190817435e-05, -6.0187634201831986e-05, -1.2511693629463236e-07, 3.4846131421423765e-08, 3.981006385045192e-11, -6.70454435602959e-12] ,[-9.78029539551841, 9.84650632297172, -6.2334356081838695, 0.049371785245764334, 0.03811382828526399, 8.21204623485868e-05, -6.0187634201831986e-05, -1.2511693629463236e-07, 3.484634745717913e-08, 3.981006385045192e-11, -6.70454435602959e-12] ,[-9.781276941505288, 9.843530091514516, -6.233478821385673, 0.04937176912487429, 0.03811382828526399, 8.211992209056427e-05, -6.0187634201831986e-05, -1.2511730695671672e-07, 3.4846131421423765e-08, 3.981006385045192e-11, -6.70454435602959e-12] ,[-9.78126175608382, 9.839578855537185, -6.233413701657839, 0.04937304471975574, 0.038113570476712835, 8.211975849232387e-05, -6.0183649591513666e-05, -1.2511730695671672e-07, 3.483998469172036e-08, 3.981006385045192e-11, -6.70303743942093e-12] ,[-9.781275222702572, 9.843530091514516, -6.2334781519829425, 0.04937184230813948, 0.038113570476712835, 8.211992209056427e-05, -6.0187634201831986e-05, -1.2511693629463236e-07, 3.4846131421423765e-08, 3.981006385045192e-11, -6.70454435602959e-12] ,[-9.780688461332359, 9.843530091514516, -6.233478821385673, 0.04937174954861204, 0.038113570476712835, 8.211992209056427e-05, -6.0187634201831986e-05, -1.2511730695671672e-07, 3.4846131421423765e-08, 3.981006385045192e-11, -6.70454435602959e-12] ,[-9.781275222702572, 9.843530091514516, -6.2334357447898165, 0.049371785245764334, 0.03811382828526399, 8.21204623485868e-05, -6.0187634201831986e-05, -1.2511693629463236e-07, 3.484634745717913e-08, 3.981006385045192e-11, -6.70454435602959e-12] ,[-9.781276941505288, 9.84353016598803, -6.233413701657839, 0.04936992994258725, 0.03811382828526399, 8.211992209056427e-05, -6.018754046151137e-05, -1.2511730695671672e-07, 3.4846131421423765e-08, 3.981006385045192e-11, -6.70454435602959e-12] ,[-9.77815421280399, 9.840300572264853, -6.233344757108135, 0.04937304471975574, 0.03811382945290939, 8.211991109154065e-05, -6.0187616607779957e-05, -1.2511730067779349e-07, 3.484628343995933e-08, 3.981006385045192e-11, -6.704592426928603e-12] ,[-9.781273143458895, 9.843541862781125, -6.233385668452207, 0.04935825797810276, 0.038113567881252634, 8.21199219831958e-05, -6.018365555631565e-05, -1.2507887053901914e-07, 3.4844581660667263e-08, 3.9820529990809054e-11, -6.704592426928603e-12]]
    for i in initial_models:
        population.append(Individual(i))
    # population.append(Individual(first_individual))
    generation=0
    # while(len(population)<POPULATION_SIZE):
    #     x=create_gnome()
    #     population.append(Individual(x))
    # population = sorted(population, key = lambda x:x.fitness)
    # temp=5
    # while(temp):
    while(1):
        population = sorted(population, key = lambda x:x.fitness)
        child_population = []
        ## for adding the individuals with least fitness score. We need to sort based on fitness score??
        # child_population.extend(population[:5]) 
        probablity_array=[]
        fitness_sum=0
        for i in range(int((50*POPULATION_SIZE)/100)):
            fitness_sum=fitness_sum+population[i].fitness
        for i in range(int((50*POPULATION_SIZE)/100)):
            probablity_array.append(fitness_sum/population[i].fitness)
        for _ in range(int((90*POPULATION_SIZE)/100)): 
            # parents = random.choices(population[:int((50*POPULATION_SIZE)/100)],weights=probablity_array,cum_weights=None,k=2)
            parents=[]
            parents.append(random.choice(population[:int((50*POPULATION_SIZE)/100)]))
            parents.append(random.choice(population[:int((50*POPULATION_SIZE)/100)]))
            child = parents[0].mate(parents[1])
            child_population.append(Individual(child))

        for i in range((POPULATION_SIZE-int((90*POPULATION_SIZE)/100))):
            child_population.append(population[i])
        for i in range(int((20*POPULATION_SIZE)/100)):
            print(str(i)+str(len(child_population))+str(len(population))+submit(ID,population[i].chromosome))

        population = child_population
        # temp=temp-1
        generation=generation+1
        print(generation,end=' ')
        # print(probablity_array)

if __name__ == '__main__': 
    main()