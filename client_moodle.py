import json
import requests
import numpy as np
import random
import os

######### DO NOT CHANGE ANYTHING IN THIS FILE ##################
API_ENDPOINT = 'http://10.4.21.147'
PORT = 3000
MAX_DEG = 11
TARGET_LENGTH=11

POPULATION_SIZE = 35
file = open("models.txt" , "a")
ID='9wAwMbeZDb2T9n57mknTNdOYGuNbbe7PrPx3R7lvdilAjZzxcs'
THRESHOLD=1500000

#### functions that you can call
def break_condition(population):
    sum=0
    for i in population:
        sum=sum+i.fitness
    sum=sum/POPULATION_SIZE
    if sum < THRESHOLD:
        return False
    return True

def get_errors(id, vector):
    """
    returns python array of length 2 
    (train error and validation error)
    """
    for i in vector: assert -10<=abs(i)<=10
    assert len(vector) == MAX_DEG

    return json.loads(send_request(id, vector, 'geterrors'))

def submit(id, vector):
    """
    used to make official submission of your weight vector
    returns string "successfully submitted" if properly submitted.
    """
    for i in vector: assert -10<=abs(i)<=10
    assert len(vector) == MAX_DEG
    return send_request(id, vector, 'submit')

#### utility functions
def urljoin(root, port, path=''):
    root = root + ':' + str(port)
    if path: root = '/'.join([root.rstrip('/'), path.rstrip('/')])
    return root

def send_request(id, vector, path):
    api = urljoin(API_ENDPOINT, PORT, path)
    vector = json.dumps(vector)
    response = requests.post(api, data={'id':id, 'vector':vector}).text
    if "reported" in response:
        print(response)
        exit()

    return response




class Individual(object):
    def __init__(self,chromosome):
        global ID
        global file
        self.chromosome = chromosome
        self.err_value = get_errors(ID,self.chromosome)
        file.write(str(self.chromosome ))
        file.write(" ")
        file.write(str(self.err_value))
        file.write("\n")
        self.fitness = self.cal_fitness()


    def mate(self, par2):
        child_chromosome = []
        for gp1, gp2 in zip(self.chromosome, par2.chromosome):
            prob = random.random()
            if prob < 0.45:
                if prob < 0.0125:
                    gene = random.uniform(-1.0,1.0)
                    gp1=gp1+(gene*(1e-13))
                child_chromosome.append(gp1)
            elif prob < 0.90:
                if prob < 0.4625:
                    gene = random.uniform(-1.0,1.0)
                    gp2=gp2+(gene*(1e-13))
                child_chromosome.append(gp2)
            else:
                child_chromosome.append(random.uniform(0.0,20.0)-10)
        return child_chromosome


    def probability(self):
        pass

    def cal_fitness(self):
        fitness = 2*(self.err_value[0] + self.err_value[1]) + abs(self.err_value[0] - self.err_value[1])
        return fitness


def create_gnome():
    global TARGET_LENGTH
    gnome = [0.0, 0.1240317450077846, -6.211941063144333, 0.04933903144709126, 0.03810848157715883, 8.132366097133624e-05, -6.018769160916912e-05, -1.251585565299179e-07, 3.484096383229681e-08, 4.1614924993407104e-11, -6.732420176902565e-12]
    gene = random.uniform(0.0,1.0)
    for i in range (len(gnome)):
        gnome[i]=gnome[i]+(gene*(1e-10))
        
    return gnome

# Driver code
def main():
    # print("la")
    global file

    global POPULATION_SIZE
    # first_individual=[0.0, 0.1240317450077846, -6.211941063144333, 0.04933903144709126, 0.03810848157715883, 8.132366097133624e-05, -6.018769160916912e-05, -1.251585565299179e-07, 3.484096383229681e-08, 4.1614924993407104e-11, -6.732420176902565e-12]
    population = []
    initial_models=[[-9.93345546180462, -8.887478321346991, -5.773548835199797, 0.04933903146413773, 0.03810848157715883, 8.132366679513179e-05, -6.018768778767615e-05, -1.25154674048332e-07, 3.4846364714444614e-08, 4.1579136643473724e-11, -6.710657458429622e-12] ,[-9.933455461804474, -8.887478321346991, -5.7735488351998905, 0.04933903146399433, 0.03810848157725115, 8.132366676639387e-05, -6.0187687865717977e-05, -1.251547350369414e-07, 3.4846399594844416e-08, 4.1614924993407104e-11, -6.711072316317888e-12] ,[-9.933455461804396, -8.887478321346974, -5.773548835199797, 0.04933903146406502, 0.03810848157715883, 8.132366676639387e-05, -6.018768778767615e-05, -1.251547742745754e-07, 3.48464513889866e-08, 4.155682524809779e-11, -6.725733928365474e-12] ,[-9.933455461804536, -8.887478321347075, -5.773548835199739, 0.04933903146406502, 0.03810848157715883, 8.13236666948672e-05, -6.018768787339004e-05, -1.251547350369414e-07, 3.48464513889866e-08, 4.1557868281228904e-11, -6.725733928365474e-12] ,[-9.933455461804536, -8.887478321346942, -5.773548835199797, 0.04933903146406502, 0.03810848157725115, 8.132366676639387e-05, -6.018768787339004e-05, -1.251547350369414e-07, 3.48464513889866e-08, 4.1557868281228904e-11, -6.725733928365474e-12] ,[-9.933455461804536, -8.887478321346942, -5.773548835199797, 0.04933903146406502, 0.03810848157715883, 8.132366676639387e-05, -6.018768787339004e-05, -1.251547350369414e-07, 3.484642929529883e-08, 4.1557868281228904e-11, -6.725733928365474e-12] ,[-9.933455461804474, -8.887478321346903, -5.773548835199797, 0.04933903146391937, 0.03810848157715883, 8.132366674138635e-05, -6.018768778767615e-05, -1.251547524691638e-07, 3.4846399594844416e-08, 4.161228904081795e-11, -6.70681359376709e-12] ,[6.581814614591448, -8.887478321346991, -5.773548835199797, 0.04933903146413773, 0.038108481577183766, 8.132366676639387e-05, -6.018768778767615e-05, -1.251547734674321e-07, 3.4846364714444614e-08, 4.1579136643473724e-11, -6.725733928365474e-12] ,[6.581814614591448, -8.887478321346991, -5.773548835199797, 0.04933903146406502, 0.038108481577065444, 8.132366676639387e-05, -6.018768778767615e-05, -1.2515470874636444e-07, 3.484626988408817e-08, 4.1579136643473724e-11, -6.725733928365474e-12] ,[6.581814614591448, -8.85013284421608, -5.773548835199797, 0.04933903146413773, 0.038108481577183766, 8.132366676639387e-05, -6.018768778767615e-05, -1.251547350369414e-07, 3.484626988408817e-08, 4.1579136643473724e-11, -6.725733928365474e-12] ,[-9.996950253353713, -8.887478321347055, -5.773548835199797, 0.04933903146406502, 0.03810848157715883, 8.13236666948672e-05, -6.018768778767615e-05, -1.251547350369414e-07, 3.48464513889866e-08, 4.161228904081795e-11, -6.725733928365474e-12] ,[-9.933455461804536, -8.887478321346991, -5.773548835199797, 0.04933903146414369, 0.03810848157715883, 8.132366679513179e-05, -6.018768778767615e-05, -1.25154674048332e-07, 3.48464513889866e-08, 4.161228904081795e-11, -6.725733928365474e-12] ,[-9.933455461804474, -8.887478321346991, -5.773548835199797, 0.04933903146413773, 0.03810848157715883, 8.132366676639387e-05, -6.018768778767615e-05, -1.251547734674321e-07, 3.4846364714444614e-08, 4.161228904081795e-11, -6.725733928365474e-12] ,[-9.933455461804474, -8.887478321347075, -5.773548835199797, 0.04933903146413773, 0.03810848157715883, 8.13236666948672e-05, -6.018768778767615e-05, -1.251547350369414e-07, 3.4846364714444614e-08, 4.161228904081795e-11, -6.725733928365474e-12] ,[-9.93345546180462, -8.887478321346991, -5.773548835199797, 0.04933903146413773, 0.03810848157715883, 8.132366679513179e-05, -6.018768778767615e-05, -1.25154674048332e-07, 3.4846364714444614e-08, 4.161228904081795e-11, -6.725733928365474e-12] ,[-9.933455461804474, -8.887478321346991, -5.773548835199797, 0.04933903146413773, 0.03810848157715883, 8.13236666948672e-05, -6.018768778767615e-05, -1.2515463793758103e-07, 3.4846364714444614e-08, 4.161228904081795e-11, -6.725733928365474e-12] ,[-9.9334554618044, -8.887478321346991, -5.773548835199797, 0.04933903146413773, 0.03810848157715883, 8.132366676639387e-05, -6.0187687821249655e-05, -1.251547734674321e-07, 3.484626988408817e-08, 4.161228904081795e-11, -6.725733928365474e-12] ,[-9.933455461804536, -8.887478321346991, -5.773548835199797, 0.04933903146399433, 0.03810848157725115, 8.132366676639387e-05, -6.018768790149069e-05, -1.251547350369414e-07, 3.48464513889866e-08, 4.1614924993407104e-11, -6.725733928365474e-12] ,[-9.933455461804536, -8.887478321346991, -5.773548835199797, 0.04933903146413056, 0.038108481577232824, 8.132366676639387e-05, -6.018768790149069e-05, -1.2515470874636444e-07, 3.48464513889866e-08, 4.1614924993407104e-11, -6.725733928365474e-12] ,[-9.933455461804474, -8.85013284421608, -5.773548835199797, 0.04933903146413773, 0.03810848157715883, 8.13236666948672e-05, -6.018768778767615e-05, -1.251547350369414e-07, 3.4846364714444614e-08, 4.1621498379673716e-11, -6.725733928365474e-12] ,[5.470295028271934, -8.887478321346894, -5.773548835199797, 0.04933903146413773, 0.03810848157715883, 8.13236666948672e-05, -6.018768778767615e-05, -1.251547350369414e-07, 3.4846364714444614e-08, 4.1614924993407104e-11, -6.725733928365474e-12] ,[6.581814614591448, -8.887478321346991, -5.773548835199797, 0.04933903146406502, 0.03810848157715883, 8.132366676639387e-05, -6.018768778767615e-05, -1.251547350369414e-07, 3.484626988408817e-08, 4.1614924993407104e-11, -6.725733928365474e-12] ,[-9.933455461804474, -8.887478321346991, -5.773548835199737, 0.04933903146406502, 0.0381084815771099, 8.132366679513179e-05, -6.018768778767615e-05, -1.251547350369414e-07, 3.484626988408817e-08, 4.151445883480867e-11, -6.6994048247608275e-12] ,[-9.933455461804545, -8.887478321346991, -5.773548835199718, 0.04933903146399433, 0.03810848157715883, 8.132366676639387e-05, -6.0187687865717977e-05, -1.251547350369414e-07, 3.48464513889866e-08, 4.1614924993407104e-11, -6.703433804112863e-12] ,[-9.933455461804474, -3.207675723682022, -5.7735488351997875, 0.049339031463970506, 0.03810848157715883, 8.13236667696077e-05, -6.018768780504313e-05, -1.251547350369414e-07, 3.4846364714444614e-08, 4.1614924993407104e-11, -6.71156387075627e-12] ,[-9.933455461804474, -8.88747832134713, -5.773548835199863, 0.04933903146406502, 0.03810848157715883, 8.13236666948672e-05, -6.018768778767615e-05, -1.251547350369414e-07, 3.48464513889866e-08, 4.155682524809779e-11, -6.732420176902565e-12] ,[-9.933455461804536, -8.887478321347006, -5.773548835199797, 0.04933903146399433, 0.03810848157715883, 8.132366676639387e-05, -6.018768787339004e-05, -1.251547350369414e-07, 3.48464513889866e-08, 4.155682524809779e-11, -6.732420176902565e-12] ,[-9.933455461804474, -8.887478321347055, -5.773548835199797, 0.04933903146406502, 0.03810848157715883, 8.132366676639387e-05, -6.018768787339004e-05, -1.251547350369414e-07, 3.48464513889866e-08, 4.155682524809779e-11, -6.732420176902565e-12] ,[-9.348826247297932, -8.887478321346991, -5.621428569835409, 0.04933903146399433, 0.03810848157715883, 8.132366676639387e-05, -6.018768778767615e-05, -1.251547350369414e-07, 3.4846364714444614e-08, 4.1614924993407104e-11, -6.732420176902565e-12] ,[-9.93345546180462, -8.887478321346991, -5.773548835199797, 0.04933903146406502, 0.03810848157715883, 8.132366679513179e-05, -6.018768787339004e-05, -1.251547350369414e-07, 3.48464513889866e-08, 4.1557868281228904e-11, -6.732420176902565e-12] ,[-9.933455461804536, -8.887478321346991, -5.773548835199797, 0.04933903146413056, 0.03810848157725115, 8.132366676639387e-05, -6.018768790149069e-05, -1.251547350369414e-07, 3.48464513889866e-08, 4.1557868281228904e-11, -6.732420176902565e-12] ,[-9.933455461804536, -8.887478321346991, -5.773548835199797, 0.04933903146406502, 0.03810848157715883, 8.132366676639387e-05, -6.018768790149069e-05, -1.251547350369414e-07, 3.48464513889866e-08, 4.1557868281228904e-11, -6.732420176902565e-12] ,[-9.933455461804536, -8.887478321346991, -5.773548835199797, 0.04933903146413056, 0.03810848157715883, 8.132366676639387e-05, -6.018768790149069e-05, -1.2515472610302813e-07, 3.48464513889866e-08, 4.1557868281228904e-11, -6.732420176902565e-12] ,[-9.996950253353713, -8.887478321347055, -5.773548835199797, 0.0493390314641028, 0.03810848157715883, 8.132366662974802e-05, -6.018768787339004e-05, -1.251547350369414e-07, 3.484626988408817e-08, 4.1557868281228904e-11, -6.732420176902565e-12] ,[-1.0702031394407925, -8.887478321346991, -5.773548835199797, 0.04933903146413056, 0.03810848157715883, 8.132366676639387e-05, -6.018768778767615e-05, -1.251547734674321e-07, 3.4846364714444614e-08, 4.1557868281228904e-11, -6.732420176902565e-12]]
    for i in initial_models:
        population.append(Individual(i))
    # population.append(Individual(first_individual))
    generation=0
    # while(len(population)<POPULATION_SIZE):
    #     x=create_gnome()
    #     population.append(Individual(x))
    # population = sorted(population, key = lambda x:x.fitness)
    # temp=5
    # while(temp):
    while(break_condition(population)):
        population = sorted(population, key = lambda x:x.fitness)
        child_population = []
        ## for adding the individuals with least fitness score. We need to sort based on fitness score??
        # child_population.extend(population[:5]) 
        for _ in range(int((80*POPULATION_SIZE)/100)): 
            parent1 = random.choice(population[:int((50*POPULATION_SIZE)/100)])
            parent2 = random.choice(population[:int((50*POPULATION_SIZE)/100)])
            child = parent1.mate(parent2)
            child_population.append(Individual(child))

        for i in range((POPULATION_SIZE-int((80*POPULATION_SIZE)/100))):
            child_population.append(population[i])
        for i in range((POPULATION_SIZE-int((90*POPULATION_SIZE)/100))):
            submit(ID,population[i].chromosome)

        population = child_population
        # temp=temp-1
        generation=generation+1
        print(generation)

if __name__ == '__main__': 
    main()