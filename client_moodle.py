import json
import requests
import numpy as np
import random
import os
from random import randint
######### DO NOT CHANGE ANYTHING IN THIS FILE ##################
API_ENDPOINT = 'http://10.4.21.147'
PORT = 3000
MAX_DEG = 11
TARGET_LENGTH=11

POPULATION_SIZE = 35
file = open("test.txt" , "a")
file2 = open("test1.txt" , "w")
ID='9wAwMbeZDb2T9n57mknTNdOYGuNbbe7PrPx3R7lvdilAjZzxcs'
THRESHOLD=1500000

#### functions that you can call
# def break_condition(population):
#     sum=0
#     for i in population:
#         sum=sum+i.fitness
#     sum=sum/POPULATION_SIZE
#     if sum < THRESHOLD:
#         return False
#     return True

def get_errors(id, vector):
    """
    returns python array of length 2 
    (train error and validation error)
    """
    for i in vector: assert -10<=abs(i)<=10
    assert len(vector) == MAX_DEG

    return json.loads(send_request(id, vector, 'geterrors'))

def submit(id, vector):
    """
    used to make official submission of your weight vector
    returns string "successfully submitted" if properly submitted.
    """
    for i in vector: assert -10<=abs(i)<=10
    assert len(vector) == MAX_DEG
    return send_request(id, vector, 'submit')

#### utility functions
def urljoin(root, port, path=''):
    root = root + ':' + str(port)
    if path: root = '/'.join([root.rstrip('/'), path.rstrip('/')])
    return root

def send_request(id, vector, path):
    api = urljoin(API_ENDPOINT, PORT, path)
    vector = json.dumps(vector)
    response = requests.post(api, data={'id':id, 'vector':vector}).text
    if "reported" in response:
        print(response)
        exit()

    return response




class Individual(object):
    def __init__(self,chromosome):
        global ID
        global file
        self.chromosome = chromosome
        self.err_value = get_errors(ID,self.chromosome)
        file.write(str(self.chromosome ))
        file.write(" ")
        file.write(str(self.err_value))
        file.write("\n")
        file2.write(str(self.chromosome ))
        file2.write(" ")
        file2.write(str(self.err_value))
        file2.write("\n")
        self.fitness = self.cal_fitness()


    def mate(self, par2):
        child_chromosome = []
        i=0
        for gp1, gp2 in zip(self.chromosome, par2.chromosome):
            prob = random.random()
            # if prob < 0.4:
            #     if prob < 0.0125:
            #         gene = random.uniform(-1.0,1.0)
            #         gp1=gp1+(gene*(1e-13))
            #     child_chromosome.append(gp1)
            # elif prob < 0.80:
            #     if prob < 0.4125:
            #         gene = random.uniform(-1.0,1.0)
            #         gp2=gp2+(gene*(1e-13))
            #     child_chromosome.append(gp2)
            # else:
            #     child_chromosome.append(random.uniform(0.0,20.0)-10)
            if prob < 0.5:
                if prob < 0.175:
                    # if gp1 < -8.8:
                    #     gene = random.uniform(-10.0,gp1+1.2)
                    # elif gp1 > 8.8:
                    #     gene = random.uniform(gp1-1.2,10.0)
                    # else:
                    #     gene = random.uniform(gp1-1.2,gp1+1.2)
                    # if prob < 0.066:
                    random_float=random.uniform(i+1,i+9)
                    gene=gp1+(randint(-9,9) + random.uniform(-0.999999999999999,0.999999999999999))/(10**random_float)
                    # else:
                    #     random_float=random.uniform(5,15)
                    #     gene=gp1+(random.uniform(-1,1))/(10**random_float)
                    # if i <3 :
                    #     if prob<0.5:
                    #         gene=random.uniform(-10.0,10.0)
                    #     else:
                    #         gene=gp1+random.random(-1,1)
                    if abs(gene)<=10:
                        gp1=gene
                child_chromosome.append(gp1)
            else:
                if prob < 0.675:
                    # if gp2 < -8.8:
                    #     gene = random.uniform(-10.0,gp2+1.2)
                    # elif gp2 > 8.8:
                    #     gene = random.uniform(gp2-1.2,10.0)
                    # else:
                    #     gene = random.uniform(gp2-1.2,gp2+1.2)
                    # if prob < 0.666:
                    random_float=random.uniform(i+1,i+9)
                    gene=gp2+(randint(-9,9) + random.uniform(-0.999999999999999,0.999999999999999))/(10**random_float)
                    # else:
                    #     random_float=random.uniform(5,15)
                    #     gene=gp2+(random.uniform(-1,1))/(10**random_float)
                    # if i <3 :
                    #     if prob<5.5:
                    #         gene=random.uniform(-10.0,10.0)
                    #     else:
                    #         gene=gp2+random.random(-1,1)
                    if abs(gene)<=10:
                        gp2=gene
                child_chromosome.append(gp2)
            # else:
            #     child_chromosome.append(random.uniform(0.0,20.0)-10)
            i=i+1
        return child_chromosome


    def probability(self):
        pass

    def cal_fitness(self):
        fitness = (self.err_value[0] + self.err_value[1]) 
        return fitness

def cal_min(a,b):
    if a<b:
        return a
    return b

def create_gnome():
    global TARGET_LENGTH
    gnome = [[-7.836019304743436, 1.721828521475464, -5.994260003978321, 0.04933903146360126, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-7.836019304743436, 1.9804091656220617, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978321, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978321, 0.04933903146360126, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768797865638e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978321, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.257724399897878, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846148674339024e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.128271655364124, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978423, 0.04933903146367728, 0.038108481576750876, 8.132366660970913e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.6331278923663266, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366664350214e-05, -6.018768797865638e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978423, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978423, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.9942600039784795, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366684905482e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.440732468304468, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846148674339024e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038695802102256e-11, -6.704733356106608e-12] ,[-6.582286044798396, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12]]
    gene = random.uniform(0.0,1.0)
    for i in range (len(gnome)):
        gnome[i]=gnome[i]+(gene*(1e-10))
        
    return gnome

# Driver code
def main():
    # print("la")
    global file

    global POPULATION_SIZE
    # first_individual=[0.0, 0.1240317450077846, -6.211941063144333, 0.04933903144709126, 0.03810848157715883, 8.132366097133624e-05, -6.018769160916912e-05, -1.251585565299179e-07, 3.484096383229681e-08, 4.1614924993407104e-11, -6.732420176902565e-12]
    population = []
    initial_models=[[-9.808592243915387, 9.841434526308342, -6.229798448902103, 0.04955279177368278, 0.03811226089050562, 8.574939866447854e-05, -6.018935659652555e-05, -1.255121529701466e-07, 3.4847438377520045e-08, 3.936401404653532e-11, -6.704582945477727e-12] ,[-9.808212696581938, 9.841263028452953, -6.233528452116379, 0.049573509723531584, 0.03811226159411737, 8.390553868683647e-05, -6.018386564003413e-05, -1.2494317937298283e-07, 3.484563432935842e-08, 3.936401404653532e-11, -6.705768814291013e-12] ,[-9.808592243915387, 9.841434526308342, -6.233528452116379, 0.04955279177368278, 0.03811226106524213, 8.390553868683647e-05, -6.018386564003413e-05, -1.2494317937298283e-07, 3.484563432935842e-08, 3.936401404653532e-11, -6.704582945477727e-12] ,[-9.78671894986075, 9.841443650138814, -6.229801074245364, 0.049832540928184184, 0.038113568955690465, 8.496012896323794e-05, -6.018780867215295e-05, -1.2518893292930453e-07, 3.484865443745733e-08, 3.936401404653532e-11, -6.705161077178298e-12] ,[-9.809758074220063, 9.841443650138814, -6.233527747196275, 0.049832540928184184, 0.038113568955690465, 8.350332610026173e-05, -6.018780867215295e-05, -1.2493006069438054e-07, 3.484624237330546e-08, 3.936401404653532e-11, -6.705348752420082e-12] ,[-9.78671894986075, 9.841443650138814, -6.233527747196275, 0.049832540928184184, 0.038113568955690465, 8.350332610026173e-05, -6.018780867215295e-05, -1.2493006069438054e-07, 3.4849718820976997e-08, 3.936401404653532e-11, -6.705348752420082e-12] ,[-9.807597755901298, 9.84177550157762, -6.2321608865441425, 0.049374544080209304, 0.038113568955690465, 8.496012896323794e-05, -6.018780811414892e-05, -1.2509888079531207e-07, 3.4849718820976997e-08, 3.936401404653532e-11, -6.705987115808397e-12] ,[-9.78671894986075, 9.841443650138814, -6.233527747196275, 0.049832540928184184, 0.038113567881252634, 8.350332610026173e-05, -6.018780867215295e-05, -1.2494317937298283e-07, 3.4849718820976997e-08, 3.936401404653532e-11, -6.705261902875324e-12] ,[-9.808133567122685, 9.841786701183638, -6.233526913480669, 0.04960600586887398, 0.03811355252970404, 8.35443583045931e-05, -6.0189316168592415e-05, -1.2488530586164224e-07, 3.484504390191494e-08, 3.9371158114583144e-11, -6.704592426928603e-12] ,[-9.786716150065766, 9.875313752834048, -6.229806507859553, 0.04960599438712899, 0.03811226106524213, 8.35662921730233e-05, -6.018935659652555e-05, -1.249510595812952e-07, 3.484624237330546e-08, 3.936401404653532e-11, -6.704592426928603e-12] ,[-9.808212696581938, 9.841786701183638, -6.233526913480669, 0.04955415691942208, 0.03811355252970404, 8.35443583045931e-05, -6.018931708500296e-05, -1.2488530586164224e-07, 3.4844871847581845e-08, 3.936401404653532e-11, -6.704413129742089e-12] ,[-9.807269830179195, 9.875391281671924, -6.229806507859553, 0.04960600586887398, 0.038113567881252634, 8.354118450378044e-05, -6.018935659652555e-05, -1.249510595812952e-07, 3.484624237330546e-08, 3.936401404653532e-11, -6.704592426928603e-12] ,[-9.807269830179195, 9.875391281671924, -6.229806507859553, 0.04955415691942208, 0.038113567881252634, 8.358071997586881e-05, -6.0189317861828434e-05, -1.24952431821525e-07, 3.484624237330546e-08, 3.936401404653532e-11, -6.704592426928603e-12] ,[-9.807269830179195, 9.875391281671924, -6.229784924671446, 0.04960600586887398, 0.038113567881252634, 8.354118450378044e-05, -6.018983319524437e-05, -1.249510595812952e-07, 3.484626215947285e-08, 3.936401404653532e-11, -6.704592426928603e-12] ,[-9.808212696581938, 9.84245125526068, -6.233528308764507, 0.04955415691942208, 0.038113525339352756, 8.358071997586881e-05, -6.0189317861828434e-05, -1.2494317937298283e-07, 3.484563432935842e-08, 3.936401404653532e-11, -6.704592426928603e-12] ,[-9.808212696581938, 9.841786701183638, -6.233528308764507, 0.04955415691942208, 0.038113568955690465, 8.358071997586881e-05, -6.0189317861828434e-05, -1.2494317937298283e-07, 3.484563432935842e-08, 3.936401404653532e-11, -6.704592426928603e-12] ,[-9.78671894986075, 9.875391281671924, -6.233527747196275, 0.04960061970250169, 0.038113568955690465, 8.350332610026173e-05, -6.018780867215295e-05, -1.2491872142752532e-07, 3.484563432935842e-08, 3.936401404653532e-11, -6.705348752420082e-12] ,[-9.786716150065766, 9.875391281671924, -6.229806507859553, 0.04960600586887398, 0.03811226106524213, 8.358071997586881e-05, -6.018931708500296e-05, -1.249515626752048e-07, 3.484624237330546e-08, 3.936401404653532e-11, -6.705768814291013e-12] ,[-9.808592243915387, 9.841437923144698, -6.233528443184328, 0.04955415691942208, 0.03811227615166244, 8.358071997586881e-05, -6.0189317861828434e-05, -1.2494317937298283e-07, 3.484563432935842e-08, 3.936401404653532e-11, -6.704592426928603e-12] ,[-9.811094913390257, 9.875391281671924, -6.23488945568391, 0.04960600586887398, 0.038113568955690465, 8.350332610026173e-05, -6.018780867215295e-05, -1.249515626752048e-07, 3.484563432935842e-08, 3.936401404653532e-11, -6.704592426928603e-12] ,[-9.805944454395839, 9.841443650138814, -6.233438130659646, 0.04953690719842107, 0.0381135592963493, 8.355494114367059e-05, -6.0192798315487286e-05, -1.247507731395824e-07, 3.4849718820976997e-08, 3.936401404653532e-11, -6.704592426928603e-12] ,[-9.807329002867725, 9.841437280412478, -6.229798448902103, 0.04955415691942208, 0.038113567881252634, 8.35443583045931e-05, -6.018645715104854e-05, -1.2494317937298283e-07, 3.484737993485648e-08, 3.934699878650829e-11, -6.705987115808397e-12] ,[-9.807269830179195, 9.84316620635273, -6.229806507859553, 0.04955415691942208, 0.03811228459098296, 8.355728116910165e-05, -6.0189317861828434e-05, -1.249510595812952e-07, 3.484624237330546e-08, 3.936401404653532e-11, -6.704592426928603e-12] ,[-9.805944454395839, 9.841443650138814, -6.232162136632729, 0.04953690719842107, 0.038113559306891864, 8.355728116910165e-05, -6.0192798315487286e-05, -1.247507731395824e-07, 3.4849718820976997e-08, 3.936401404653532e-11, -6.704592426928603e-12] ,[-9.786716150065766, 9.875391281671924, -6.229806507859553, 0.04960600586887398, 0.038113567881252634, 8.350332610026173e-05, -6.018780867215295e-05, -1.249515626752048e-07, 3.484624237330546e-08, 3.936401404653532e-11, -6.704592426928603e-12] ,[-9.808791037222235, 9.841786701183638, -6.233526913480669, 0.04955415691942208, 0.038113568955690465, 8.35443583045931e-05, -6.0189317861828434e-05, -1.2494317937298283e-07, 3.4844871847581845e-08, 3.936399667190515e-11, -6.704413129742089e-12] ,[-9.808212696581938, 9.841437280412478, -6.233528313310636, 0.04955415691942208, 0.03811228459098296, 8.35443583045931e-05, -6.0189317861828434e-05, -1.2494317937298283e-07, 3.484563432935842e-08, 3.936401404653532e-11, -6.704592426928603e-12] ,[-9.78671894986075, 9.841443650138814, -6.233525305755692, 0.04955279177368278, 0.03811226106524213, 8.354138674882366e-05, -6.01877324365644e-05, -1.2494317937298283e-07, 3.4849779795575454e-08, 3.936401404653532e-11, -6.705768814291013e-12] ,[-9.809294204399347, 9.84177550157762, -6.2321608865441425, 0.04937507080012255, 0.03811355328154739, 8.496012896323794e-05, -6.018780867215295e-05, -1.2509888079531207e-07, 3.4849718820976997e-08, 3.936401404653532e-11, -6.705261902875324e-12] ,[-9.120997827677481, 9.89296565273328, -6.22979846421087, 0.0495534849592698, 0.03811370011147953, 8.35443583045931e-05, -6.01877324365644e-05, -1.2494317937298283e-07, 3.484979211334549e-08, 3.9363618709416965e-11, -6.705768814291013e-12] ,[-9.809758074220063, 9.84124504663274, -6.233438130659646, 0.049511787405443604, 0.0381135592963493, 8.355728116910165e-05, -6.018935659652555e-05, -1.2492021770387755e-07, 3.4849718820976997e-08, 3.936474887659535e-11, -6.705261902875324e-12] ,[-9.808212696581938, 9.84245125526068, -6.233527505745836, 0.04955415691942208, 0.03811226159411737, 8.358071997586881e-05, -6.0189317861828434e-05, -1.2467715023558013e-07, 3.484563432935842e-08, 3.936401404653532e-11, -6.705768814291013e-12] ,[-9.809758074220063, 9.842607706710115, -6.233438130659646, 0.04955279177368278, 0.03811226106524213, 8.354138674882366e-05, -6.01877324365644e-05, -1.2494317937298283e-07, 3.4849718820976997e-08, 3.9343089980404256e-11, -6.705768814291013e-12] ,[-9.783870251472079, 9.841445956998557, -6.232162136632729, 0.049536907191115004, 0.038113559306891864, 8.349709990689091e-05, -6.018780867215295e-05, -1.2475089419224703e-07, 3.4849718820976997e-08, 3.936401404653532e-11, -6.705261902875324e-12] ,[-9.808212696581938, 9.841785530837077, -6.233528308764507, 0.04955415691942208, 0.03811226106524213, 8.358071997586881e-05, -6.018931708500296e-05, -1.2494317937298283e-07, 3.484563432935842e-08, 3.936401404653532e-11, -6.705768814291013e-12]]
    for i in initial_models:
        population.append(Individual(i))
    # population.append(Individual(first_individual))
    generation=0
    # while(len(population)<POPULATION_SIZE):
    #     x=create_gnome()
    #     population.append(Individual(x))
    # population = sorted(population, key = lambda x:x.fitness)
    # temp=5
    # while(temp):
    while(1):
        population = sorted(population, key = lambda x:x.fitness)
        child_population = []
        ## for adding the individuals with least fitness score. We need to sort based on fitness score??
        # child_population.extend(population[:5]) 
        probablity_array=[]
        fitness_sum=0
        for i in range(int((50*POPULATION_SIZE)/100)):
            fitness_sum=fitness_sum+population[i].fitness
        for i in range(int((50*POPULATION_SIZE)/100)):
            probablity_array.append(fitness_sum/population[i].fitness)
        for _ in range(int((90*POPULATION_SIZE)/100)): 
            # parents = random.choices(population[:int((50*POPULATION_SIZE)/100)],weights=probablity_array,cum_weights=None,k=2)
            parents=[]
            parents.append(random.choice(population[:int((50*POPULATION_SIZE)/100)]))
            parents.append(random.choice(population[:int((50*POPULATION_SIZE)/100)]))
            child = parents[0].mate(parents[1])
            child_population.append(Individual(child))

        for i in range((POPULATION_SIZE-int((90*POPULATION_SIZE)/100))):
            child_population.append(population[i])
        for i in range(int((20*POPULATION_SIZE)/100)):
            print(str(i)+str(len(child_population))+str(len(population))+submit(ID,population[i].chromosome))

        population = child_population
        # temp=temp-1
        generation=generation+1
        print(generation,end=' ')
        # print(probablity_array)

if __name__ == '__main__': 
    main()