import json
import requests
import numpy as np
import random
import os

######### DO NOT CHANGE ANYTHING IN THIS FILE ##################
API_ENDPOINT = 'http://10.4.21.147'
PORT = 3000
MAX_DEG = 11
TARGET_LENGTH=11

POPULATION_SIZE = 35
file = open("test.txt" , "a")
file2 = open("test1.txt" , "w")
ID='9wAwMbeZDb2T9n57mknTNdOYGuNbbe7PrPx3R7lvdilAjZzxcs'
THRESHOLD=1500000

#### functions that you can call
# def break_condition(population):
#     sum=0
#     for i in population:
#         sum=sum+i.fitness
#     sum=sum/POPULATION_SIZE
#     if sum < THRESHOLD:
#         return False
#     return True

def get_errors(id, vector):
    """
    returns python array of length 2 
    (train error and validation error)
    """
    for i in vector: assert -10<=abs(i)<=10
    assert len(vector) == MAX_DEG

    return json.loads(send_request(id, vector, 'geterrors'))

def submit(id, vector):
    """
    used to make official submission of your weight vector
    returns string "successfully submitted" if properly submitted.
    """
    for i in vector: assert -10<=abs(i)<=10
    assert len(vector) == MAX_DEG
    return send_request(id, vector, 'submit')

#### utility functions
def urljoin(root, port, path=''):
    root = root + ':' + str(port)
    if path: root = '/'.join([root.rstrip('/'), path.rstrip('/')])
    return root

def send_request(id, vector, path):
    api = urljoin(API_ENDPOINT, PORT, path)
    vector = json.dumps(vector)
    response = requests.post(api, data={'id':id, 'vector':vector}).text
    if "reported" in response:
        print(response)
        exit()

    return response



class Individual(object):
    def __init__(self,chromosome):
        global ID
        global file
        self.chromosome = chromosome
        self.err_value = get_errors(ID,self.chromosome)
        file.write(str(self.chromosome ))
        file.write(" ")
        file.write(str(self.err_value))
        file.write("\n")
        file2.write(str(self.chromosome ))
        file2.write(" ")
        file2.write(str(self.err_value))
        file2.write("\n")
        self.fitness = self.cal_fitness()


    def mate(self, par2):
        child_chromosome = []
        i=0
        for gp1, gp2 in zip(self.chromosome, par2.chromosome):
            prob = random.random()
            # if prob < 0.4:
            #     if prob < 0.0125:
            #         gene = random.uniform(-1.0,1.0)
            #         gp1=gp1+(gene*(1e-13))
            #     child_chromosome.append(gp1)
            # elif prob < 0.80:
            #     if prob < 0.4125:
            #         gene = random.uniform(-1.0,1.0)
            #         gp2=gp2+(gene*(1e-13))
            #     child_chromosome.append(gp2)
            # else:
            #     child_chromosome.append(random.uniform(0.0,20.0)-10)
            if prob < 0.5:
                if prob < 0.1:
                    # if gp1 < -8.8:
                    #     gene = random.uniform(-10.0,gp1+1.2)
                    # elif gp1 > 8.8:
                    #     gene = random.uniform(gp1-1.2,10.0)
                    # else:
                    #     gene = random.uniform(gp1-1.2,gp1+1.2)
                    if prob < 0.066:
                        random_float=random.uniform(10,20)
                        gene=gp1+(random.uniform(-1,1))/(10**random_float)
                    else:
                        random_float=random.uniform(5,10)
                        gene=gp1+(random.uniform(-1,1))/(10**random_float)
                    if i <3 :
                        if prob<0.5:
                            gene=random.uniform(-10.0,10.0)
                        else:
                            gene=gp1+random.random(-1,1)
                    gp1=gene
                child_chromosome.append(gp1)
            else:
                if prob < 0.6:
                    # if gp2 < -8.8:
                    #     gene = random.uniform(-10.0,gp2+1.2)
                    # elif gp2 > 8.8:
                    #     gene = random.uniform(gp2-1.2,10.0)
                    # else:
                    #     gene = random.uniform(gp2-1.2,gp2+1.2)
                    if prob < 0.666:
                        random_float=random.uniform(10,20)
                        gene=gp2+(random.uniform(-1,1))/(10**random_float)
                    else:
                        random_float=random.uniform(5,10)
                        gene=gp2+(random.uniform(-1,1))/(10**random_float)
                    if i <3 :
                        if prob<5.5:
                            gene=random.uniform(-10.0,10.0)
                        else:
                            gene=gp2+random.random(-1,1)
                    gp2=gene
                child_chromosome.append(gp2)
            # else:
            #     child_chromosome.append(random.uniform(0.0,20.0)-10)
            i=i+1
        return child_chromosome


    def probability(self):
        pass

    def cal_fitness(self):
        fitness = (self.err_value[0] + self.err_value[1]) 
        return fitness

def cal_min(a,b):
    if a<b:
        return a
    return b

def create_gnome():
    global TARGET_LENGTH
    gnome = [[-7.836019304743436, 1.721828521475464, -5.994260003978321, 0.04933903146360126, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-7.836019304743436, 1.9804091656220617, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978321, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978321, 0.04933903146360126, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768797865638e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978321, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.257724399897878, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846148674339024e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.128271655364124, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978423, 0.04933903146367728, 0.038108481576750876, 8.132366660970913e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.6331278923663266, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366664350214e-05, -6.018768797865638e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978423, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978423, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.9942600039784795, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366684905482e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.440732468304468, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846148674339024e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038695802102256e-11, -6.704733356106608e-12] ,[-6.582286044798396, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12]]
    gene = random.uniform(0.0,1.0)
    for i in range (len(gnome)):
        gnome[i]=gnome[i]+(gene*(1e-10))
        
    return gnome

# Driver code
def main():
    # print("la")
    global file

    global POPULATION_SIZE
    # first_individual=[0.0, 0.1240317450077846, -6.211941063144333, 0.04933903144709126, 0.03810848157715883, 8.132366097133624e-05, -6.018769160916912e-05, -1.251585565299179e-07, 3.484096383229681e-08, 4.1614924993407104e-11, -6.732420176902565e-12]
    population = []
    initial_models=[[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585468517, 0.038110331350568266, 8.133547407665167e-05, -6.0186804521300975e-05, -1.2497763467325542e-07, 3.48468174206002e-08, 3.9898855486159234e-11, -6.704536749473669e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585467282, 0.0381103241421236, 8.133547407665167e-05, -6.0186804518571916e-05, -1.2497763467325542e-07, 3.48468174206002e-08, 3.9898855486159234e-11, -6.704536693321822e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585467282, 0.03810848154035168, 8.133547407665167e-05, -6.0186804518571916e-05, -1.249810602114456e-07, 3.48468174206002e-08, 3.9898855486159234e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902588665086, 0.03810848226795038, 8.134992887222348e-05, -6.0186804518571916e-05, -1.249776347034265e-07, 3.484656142136989e-08, 3.9921888330762773e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585467282, 0.0381103241421236, 8.13354751354921e-05, -6.018628729239859e-05, -1.2497763467325542e-07, 3.484681105878348e-08, 3.9921887882368436e-11, -6.704536673000232e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585468517, 0.0381103241421236, 8.13354751354921e-05, -6.0186804518571916e-05, -1.2497763467325542e-07, 3.484681105878348e-08, 3.9921887882368436e-11, -6.704536673000232e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585468517, 0.038108481540343686, 8.133547215355981e-05, -6.018628729239859e-05, -1.2497829061658508e-07, 3.484656142136989e-08, 3.992188656553594e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585467282, 0.03810848154035168, 8.133547407665099e-05, -6.018628729239859e-05, -1.2498115843602815e-07, 3.484667120156605e-08, 3.992188656553594e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585468517, 0.03810848154035168, 8.133547407665167e-05, -6.018628729239859e-05, -1.249811611729756e-07, 3.484667120156605e-08, 3.9921888330762773e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585467282, 0.03810848154080994, 8.133547412195973e-05, -6.0186740677735375e-05, -1.2497763467325542e-07, 3.48468174206002e-08, 3.992188656553594e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585467282, 0.03810848226795038, 8.133547188650949e-05, -6.0186740677735375e-05, -1.2497763467325542e-07, 3.48468174206002e-08, 3.992189041267674e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585467282, 0.03810848154035173, 8.133547513549107e-05, -6.018628729239859e-05, -1.2498099540843916e-07, 3.48468174206002e-08, 3.9921887882368436e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585467282, 0.03810848154035168, 8.133547407665167e-05, -6.018628729239859e-05, -1.249810602114456e-07, 3.48468174206002e-08, 3.992188656553594e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585467282, 0.03810848154035168, 8.133547407665167e-05, -6.018628729239859e-05, -1.249811611729756e-07, 3.48468174206002e-08, 3.992188656553594e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585468518, 0.03810848154080994, 8.133547407665344e-05, -6.018680452072455e-05, -1.2497763467325542e-07, 3.484686900825236e-08, 3.992188656553594e-11, -6.704536673000232e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585467282, 0.03810848154035168, 8.133547407665344e-05, -6.0186804518571916e-05, -1.2497763467933807e-07, 3.48468174206002e-08, 3.992188656553594e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585467282, 0.03810848154035168, 8.13354751354921e-05, -6.0186804518571916e-05, -1.2497763467933847e-07, 3.48468174206002e-08, 3.9921887882368436e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.049339025854680744, 0.03810848226795038, 8.133547188650949e-05, -6.0186804518577764e-05, -1.2497763467360474e-07, 3.484681742299338e-08, 3.992189041267674e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.049339025854680744, 0.03810848154080994, 8.133547407665344e-05, -6.0186804518571916e-05, -1.2497763467325542e-07, 3.484702600106985e-08, 3.9921888330762773e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585468517, 0.03810848154080994, 8.133547407665344e-05, -6.0186804518571916e-05, -1.2497763467325542e-07, 3.484667120156605e-08, 3.992188656553594e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585468517, 0.03810848154035168, 8.133547407665099e-05, -6.0186804518571916e-05, -1.2497763231519706e-07, 3.484667120156605e-08, 3.9921888330762773e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.049339025854680744, 0.03810848154080994, 8.133547407665099e-05, -6.0186804518571916e-05, -1.2497763467360474e-07, 3.484667120156605e-08, 3.9921888330762773e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585519426, 0.03810837010234927, 8.133547407665344e-05, -6.0186804518571916e-05, -1.2497763467325542e-07, 3.484702600106985e-08, 3.992188656553594e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933815778182938, 0.03810848154080994, 8.133547407665343e-05, -6.018678794293192e-05, -1.249776347591525e-07, 3.484667120306797e-08, 3.9921887882368436e-11, -6.704537268401743e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585468486, 0.03810848392799544, 8.133547407665343e-05, -6.0186804497627285e-05, -1.249776347591525e-07, 3.484656142136989e-08, 3.9921887882368436e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585468517, 0.038108481540568076, 8.133547407665343e-05, -6.0186804497627285e-05, -1.249776347591525e-07, 3.484656142136989e-08, 3.992188656553594e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585468486, 0.03810848154035168, 8.13354751354921e-05, -6.0186804518571916e-05, -1.2497763467933847e-07, 3.484656142136989e-08, 3.9921887882368436e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585468517, 0.03810848154105456, 8.133547188650949e-05, -6.01868045002869e-05, -1.2497763231519706e-07, 3.484656142136989e-08, 3.9921888330762773e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.049339025854680814, 0.038108481540811645, 8.133547407665252e-05, -6.018678794293192e-05, -1.2497930757826704e-07, 3.484667120156605e-08, 3.992188656553594e-11, -6.704537268401743e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.049339025854680744, 0.03810848154105456, 8.133547188650949e-05, -6.0186804518571916e-05, -1.2497829061658508e-07, 3.484656142136989e-08, 3.9921888330762773e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585466859, 0.038108481540811645, 8.133547381311783e-05, -6.01867921246848e-05, -1.2498000724791447e-07, 3.484667120107857e-08, 3.9921888330762773e-11, -6.704536895953279e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585467282, 0.03810848154080115, 8.133547412195973e-05, -6.0186740677735375e-05, -1.2498099540843916e-07, 3.48468174206002e-08, 3.992188785963975e-11, -6.704489059133079e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585468517, 0.03810848154035168, 8.132348101624237e-05, -6.018680450750292e-05, -1.248617273961861e-07, 3.484656142136989e-08, 3.992188656553594e-11, -6.704536899029408e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585468528, 0.038108481540809744, 8.133547407665344e-05, -6.0186804518571916e-05, -1.249810602114456e-07, 3.484702600106985e-08, 3.9921888330762773e-11, -6.704525393427937e-12] ,[-9.814759095392704, 9.839694653658285, -6.233413161021529, 0.04933902585481718, 0.03810848154081165, 8.133547407661905e-05, -6.018678794293192e-05, -1.249808551086759e-07, 3.484667120156605e-08, 3.992188656553594e-11, -6.704536895953279e-12] ]
    for i in initial_models:
        population.append(Individual(i))
    # population.append(Individual(first_individual))
    generation=0
    # while(len(population)<POPULATION_SIZE):
    #     x=create_gnome()
    #     population.append(Individual(x))
    # population = sorted(population, key = lambda x:x.fitness)
    # temp=5
    # while(temp):
    while(1):
        population = sorted(population, key = lambda x:x.fitness)
        child_population = []
        ## for adding the individuals with least fitness score. We need to sort based on fitness score??
        # child_population.extend(population[:5]) 
        probablity_array=[]
        fitness_sum=0
        for i in range(int((50*POPULATION_SIZE)/100)):
            fitness_sum=fitness_sum+population[i].fitness
        for i in range(int((50*POPULATION_SIZE)/100)):
            probablity_array.append(fitness_sum/population[i].fitness)
        for _ in range(int((90*POPULATION_SIZE)/100)): 
            # parents = random.choices(population[:int((50*POPULATION_SIZE)/100)],weights=probablity_array,cum_weights=None,k=2)
            parents=[]
            parents.append(random.choice(population[:int((50*POPULATION_SIZE)/100)]))
            parents.append(random.choice(population[:int((50*POPULATION_SIZE)/100)]))
            child = parents[0].mate(parents[1])
            child_population.append(Individual(child))

        for i in range((POPULATION_SIZE-int((90*POPULATION_SIZE)/100))):
            child_population.append(population[i])
        for i in range(int((20*POPULATION_SIZE)/100)):
            print(str(i)+str(len(child_population))+str(len(population))+submit(ID,population[i].chromosome))

        population = child_population
        # temp=temp-1
        generation=generation+1
        print(generation,end=' ')
        # print(probablity_array)

if __name__ == '__main__': 
    main()