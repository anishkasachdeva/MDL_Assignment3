import json
import requests
import numpy as np
import random
import os
from random import randint
######### DO NOT CHANGE ANYTHING IN THIS FILE ##################
API_ENDPOINT = 'http://10.4.21.147'
PORT = 3000
MAX_DEG = 11
TARGET_LENGTH=11

POPULATION_SIZE = 35
file = open("test.txt" , "a")
file2 = open("test1.txt" , "w")
ID='9wAwMbeZDb2T9n57mknTNdOYGuNbbe7PrPx3R7lvdilAjZzxcs'
THRESHOLD=1500000

#### functions that you can call
# def break_condition(population):
#     sum=0
#     for i in population:
#         sum=sum+i.fitness
#     sum=sum/POPULATION_SIZE
#     if sum < THRESHOLD:
#         return False
#     return True

def get_errors(id, vector):
    """
    returns python array of length 2 
    (train error and validation error)
    """
    for i in vector: assert -10<=abs(i)<=10
    assert len(vector) == MAX_DEG

    return json.loads(send_request(id, vector, 'geterrors'))

def submit(id, vector):
    """
    used to make official submission of your weight vector
    returns string "successfully submitted" if properly submitted.
    """
    for i in vector: assert -10<=abs(i)<=10
    assert len(vector) == MAX_DEG
    return send_request(id, vector, 'submit')

#### utility functions
def urljoin(root, port, path=''):
    root = root + ':' + str(port)
    if path: root = '/'.join([root.rstrip('/'), path.rstrip('/')])
    return root

def send_request(id, vector, path):
    api = urljoin(API_ENDPOINT, PORT, path)
    vector = json.dumps(vector)
    response = requests.post(api, data={'id':id, 'vector':vector}).text
    if "reported" in response:
        print(response)
        exit()

    return response




class Individual(object):
    def __init__(self,chromosome):
        global ID
        global file
        self.chromosome = chromosome
        self.err_value = get_errors(ID,self.chromosome)
        file.write(str(self.chromosome ))
        file.write(" ")
        file.write(str(self.err_value))
        file.write("\n")
        file2.write(str(self.chromosome ))
        file2.write(" ")
        file2.write(str(self.err_value))
        file2.write("\n")
        self.fitness = self.cal_fitness()


    def mate(self, par2):
        child_chromosome = []
        i=0
        for gp1, gp2 in zip(self.chromosome, par2.chromosome):
            prob = random.random()
            # if prob < 0.4:
            #     if prob < 0.0125:
            #         gene = random.uniform(-1.0,1.0)
            #         gp1=gp1+(gene*(1e-13))
            #     child_chromosome.append(gp1)
            # elif prob < 0.80:
            #     if prob < 0.4125:
            #         gene = random.uniform(-1.0,1.0)
            #         gp2=gp2+(gene*(1e-13))
            #     child_chromosome.append(gp2)
            # else:
            #     child_chromosome.append(random.uniform(0.0,20.0)-10)
            if prob < 0.5:
                if prob < 0.175:
                    # if gp1 < -8.8:
                    #     gene = random.uniform(-10.0,gp1+1.2)
                    # elif gp1 > 8.8:
                    #     gene = random.uniform(gp1-1.2,10.0)
                    # else:
                    #     gene = random.uniform(gp1-1.2,gp1+1.2)
                    # if prob < 0.066:
                    random_float=random.uniform(i+1,i+9)
                    gene=gp1+(randint(-9,9) + random.uniform(-0.999999999999999,0.999999999999999))/(10**random_float)
                    # else:
                    #     random_float=random.uniform(5,15)
                    #     gene=gp1+(random.uniform(-1,1))/(10**random_float)
                    # if i <3 :
                    #     if prob<0.5:
                    #         gene=random.uniform(-10.0,10.0)
                    #     else:
                    #         gene=gp1+random.random(-1,1)
                    if abs(gene)<=10:
                        gp1=gene
                child_chromosome.append(gp1)
            else:
                if prob < 0.675:
                    # if gp2 < -8.8:
                    #     gene = random.uniform(-10.0,gp2+1.2)
                    # elif gp2 > 8.8:
                    #     gene = random.uniform(gp2-1.2,10.0)
                    # else:
                    #     gene = random.uniform(gp2-1.2,gp2+1.2)
                    # if prob < 0.666:
                    random_float=random.uniform(i+1,i+9)
                    gene=gp2+(randint(-9,9) + random.uniform(-0.999999999999999,0.999999999999999))/(10**random_float)
                    # else:
                    #     random_float=random.uniform(5,15)
                    #     gene=gp2+(random.uniform(-1,1))/(10**random_float)
                    # if i <3 :
                    #     if prob<5.5:
                    #         gene=random.uniform(-10.0,10.0)
                    #     else:
                    #         gene=gp2+random.random(-1,1)
                    if abs(gene)<=10:
                        gp2=gene
                child_chromosome.append(gp2)
            # else:
            #     child_chromosome.append(random.uniform(0.0,20.0)-10)
            i=i+1
        return child_chromosome


    def probability(self):
        pass

    def cal_fitness(self):
        fitness = (self.err_value[0] + self.err_value[1]) 
        return fitness

def cal_min(a,b):
    if a<b:
        return a
    return b

def create_gnome():
    global TARGET_LENGTH
    gnome = [[-7.836019304743436, 1.721828521475464, -5.994260003978321, 0.04933903146360126, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-7.836019304743436, 1.9804091656220617, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978321, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978321, 0.04933903146360126, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.036350412020522e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768797865638e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978321, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.257724399897878, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846148674339024e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.128271655364124, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978423, 0.04933903146367728, 0.038108481576750876, 8.132366660970913e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.6331278923663266, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366664350214e-05, -6.018768797865638e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978423, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978423, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.9942600039784795, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-8.950000476918587, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366678443838e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366684905482e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846153950303964e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.440732468304468, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.4846148674339024e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-7.682703441865617, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366682405852e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484606576318202e-08, 4.038447256077998e-11, -6.704733356106608e-12] ,[-9.544012697959436, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038695802102256e-11, -6.704733356106608e-12] ,[-6.582286044798396, 1.1885813106949588, -5.994260003978408, 0.04933903146367728, 0.038108481576750876, 8.132366667945717e-05, -6.018768799848978e-05, -1.251549100085057e-07, 3.484611713424432e-08, 4.038447256077998e-11, -6.704733356106608e-12]]
    gene = random.uniform(0.0,1.0)
    for i in range (len(gnome)):
        gnome[i]=gnome[i]+(gene*(1e-10))
        
    return gnome

# Driver code
def main():
    # print("la")
    global file

    global POPULATION_SIZE
    # first_individual=[0.0, 0.1240317450077846, -6.211941063144333, 0.04933903144709126, 0.03810848157715883, 8.132366097133624e-05, -6.018769160916912e-05, -1.251585565299179e-07, 3.484096383229681e-08, 4.1614924993407104e-11, -6.732420176902565e-12]
    population = []
    initial_models=[[-9.842414622988102, 9.89444353417349, -6.234118013459396, 0.04973329552688633, 0.03811505992908011, 8.85306037591044e-05, -6.018820840256263e-05, -1.2500586936843684e-07, 3.4844341418417736e-08, 3.834122457550263e-11, -6.7053067887057894e-12] ,[-9.842414622988102, 9.89444353417349, -6.234118013473499, 0.04973329552688633, 0.038115010143631466, 8.85306037591044e-05, -6.0188222044171346e-05, -1.2500586936843684e-07, 3.48443374701548e-08, 3.834122457550263e-11, -6.705489301825759e-12] ,[-9.81805732194537, 9.89444353417349, -6.234212109372126, 0.04973329552688633, 0.038115010143631466, 8.853155624827942e-05, -6.0188915441370414e-05, -1.2500572547388898e-07, 3.48445513208613e-08, 3.834121289547328e-11, -6.705371434697721e-12] ,[-9.815930679699713, 9.912561441238934, -6.234170465093808, 0.04971721023350435, 0.03811500889103952, 8.853058607501704e-05, -6.018808234658518e-05, -1.2499884327873788e-07, 3.484431183121955e-08, 3.8286648429328815e-11, -6.7053067887057894e-12] ,[-9.802119067513335, 9.89444353417349, -6.234170465093808, 0.04973329552688633, 0.038115010143631466, 8.853070213613131e-05, -6.0188915441370414e-05, -1.2503056619348519e-07, 3.48443282749425e-08, 3.834121289547328e-11, -6.705371434697721e-12] ,[-9.815930679699713, 9.916431727154384, -6.234118013459396, 0.04971721023350435, 0.03811503304141339, 8.853286222797074e-05, -6.0188208407046795e-05, -1.2500635799856844e-07, 3.484447282933586e-08, 3.8286648429328815e-11, -6.7053067887057894e-12] ,[-9.815930679699713, 9.916431727154384, -6.234118013459396, 0.04971721023350435, 0.03811501383370818, 8.853286222797074e-05, -6.0188208407046795e-05, -1.2500635799856844e-07, 3.484447282933586e-08, 3.8286648429328815e-11, -6.7053067887057894e-12] ,[-9.815931086759077, 9.894483205426743, -6.234118013473499, 0.049719386750333806, 0.03811501298444834, 8.853295829984566e-05, -6.0188208407046795e-05, -1.2501289127893505e-07, 3.4844384118047085e-08, 3.8353697082399503e-11, -6.7053067887057894e-12] ,[-9.815930902889955, 9.893609740980743, -6.234118013459396, 0.04971939078895559, 0.03811505992908011, 8.853295822023233e-05, -6.0188208407046795e-05, -1.2500642112269184e-07, 3.484438419268785e-08, 3.8286648429328815e-11, -6.7053067887057894e-12] ,[-9.814999221479582, 9.916431727154384, -6.234118013459396, 0.04971721023350435, 0.03811505992908011, 8.853295822023233e-05, -6.0188208407046795e-05, -1.2501289127893505e-07, 3.4844472694106756e-08, 3.8286648429328815e-11, -6.7053067887057894e-12] ,[-9.818057335867127, 9.894483211138315, -6.234118012911677, 0.049719386750333806, 0.03811761300881383, 8.852101127342948e-05, -6.018821240759545e-05, -1.2500581982084862e-07, 3.484447282933586e-08, 3.835370720202912e-11, -6.7053067887057894e-12] ,[-9.802119067513335, 9.901592252044525, -6.234170465277078, 0.05000557875637816, 0.0381150129275249, 8.853155618552047e-05, -6.0188243424030296e-05, -1.2500642112269184e-07, 3.48443282749425e-08, 3.8381221954948864e-11, -6.7053067887057894e-12] ,[-9.818057335867127, 9.892242914868756, -6.234118013459396, 0.04971721023350435, 0.0381150129275249, 8.853150805879134e-05, -6.018402030001682e-05, -1.2500642112269184e-07, 3.48442777910682e-08, 3.8353697082399503e-11, -6.705486786345662e-12] ,[-9.818057335867127, 9.894483211138315, -6.234118012911677, 0.049719386750333806, 0.03810858702105731, 8.853155618552047e-05, -6.0188208407046795e-05, -1.2500642112269184e-07, 3.4844384118047085e-08, 3.8353697082399503e-11, -6.7053067887057894e-12] ,[-9.818056488032544, 9.892496153954836, -6.234212262716227, 0.04973329552688633, 0.038115010143631466, 8.853155618552047e-05, -6.0188915441370414e-05, -1.2503056619348519e-07, 3.48445513208613e-08, 3.8372133726878116e-11, -6.705736582212667e-12] ,[-9.818021288548369, 9.892242357949913, -6.234118013459396, 0.04971654465040306, 0.03811500889103952, 8.853150805879134e-05, -6.018402030001682e-05, -1.2500609587285462e-07, 3.484431183121955e-08, 3.8353697082399503e-11, -6.7053067887057894e-12] ,[-9.816753025802537, 9.916193145482444, -6.233871059790812, 0.049717239551350274, 0.03811380255232346, 8.85332336818785e-05, -6.018820089485311e-05, -1.250305721848283e-07, 3.4844472694106756e-08, 3.838147067360244e-11, -6.7053067887057894e-12] ,[-9.815929674901085, 9.916193145482444, -6.2341176890551155, 0.049718105295761116, 0.0381150129275249, 8.851945578483615e-05, -6.0188223112872646e-05, -1.250305721848283e-07, 3.4844472694106756e-08, 3.8381221954948864e-11, -6.7053067887057894e-12] ,[-9.82841901676535, 9.901592252044525, -6.233871059790812, 0.04971682103191545, 0.03811501292762948, 8.853058607501704e-05, -6.018794568374671e-05, -1.250343168947659e-07, 3.4844372682450565e-08, 3.838118230120197e-11, -6.705511335454994e-12] ,[-9.816753025802537, 9.916431727154384, -6.233871059790812, 0.049717242419748606, 0.03811380255232346, 8.853323386132011e-05, -6.01882220518389e-05, -1.250305721848283e-07, 3.484447282933586e-08, 3.8381221954948864e-11, -6.7055194854109966e-12] ,[-9.815924674811594, 9.901592252044525, -6.233871059790812, 0.049717242419748606, 0.03811501292762948, 8.853058607501704e-05, -6.0188208407046795e-05, -1.2503056619348519e-07, 3.48443374701548e-08, 3.838118230120197e-11, -6.705494440529899e-12] ,[-9.816136920427017, 9.901592252044525, -6.234115714243293, 0.049717209923137315, 0.03811501383370818, 8.853286222797074e-05, -6.0188208407046795e-05, -1.2503056619348519e-07, 3.484447282933586e-08, 3.838119553385897e-11, -6.7053067887057894e-12] ,[-9.781901017737416, 9.901592252044525, -6.2341179953260495, 0.049717209923137315, 0.0381150129275249, 8.853286222797074e-05, -6.0188208407046795e-05, -1.2503122808137584e-07, 3.484447282933586e-08, 3.838118230120197e-11, -6.7053067887057894e-12] ,[-9.802119067513335, 9.901592252044525, -6.234170465093808, 0.049717242419748606, 0.0381150129275249, 8.853058607501704e-05, -6.0188915441370414e-05, -1.2503056619348519e-07, 3.48443282749425e-08, 3.838124120923858e-11, -6.7053067887057894e-12] ,[-9.816117634906538, 9.901592252044525, -6.234118013459396, 0.049717242419748606, 0.03811501692346407, 8.853323266281764e-05, -6.0188208407046795e-05, -1.2503056619348519e-07, 3.48445513208613e-08, 3.8381221954948864e-11, -6.7053067887057894e-12] ,[-9.815930679699713, 9.901592252044525, -6.233857899262005, 0.049717242419748606, 0.0381150129275249, 8.853286222797074e-05, -6.0188208407046795e-05, -1.2503056619348519e-07, 3.484447282933586e-08, 3.8381221954948864e-11, -6.7053067887057894e-12] ,[-9.816117634906538, 9.901592252044525, -6.234118013459396, 0.049717242419748606, 0.0381150129275249, 8.853058607501704e-05, -6.0188208407046795e-05, -1.2503056619348519e-07, 3.48445513208613e-08, 3.8381221954948864e-11, -6.7053067887057894e-12] ,[-9.814999221479582, 9.916431727154384, -6.234172144126762, 0.04971721023350435, 0.03811505992908011, 8.853295829984566e-05, -6.018907269467554e-05, -1.2501289127893505e-07, 3.484454163556383e-08, 3.8381221954948864e-11, -6.705304475532164e-12] ,[-9.81593597225839, 9.89212413468626, -6.234118013473499, 0.04971704297674138, 0.03812178982761331, 8.852559940728396e-05, -6.019105308932773e-05, -1.2500635799856844e-07, 3.4844377892490825e-08, 3.8381224977864256e-11, -6.705486786345662e-12] ,[-9.815931098791772, 9.892496452153884, -6.234211160504259, 0.0497292665885698, 0.03811399950242099, 8.853323266281764e-05, -6.0188208407046795e-05, -1.2503057769943214e-07, 3.48445513208613e-08, 3.838139368064362e-11, -6.705736582212667e-12] ,[-9.815929674901085, 9.916431727154384, -6.2341176890551155, 0.04971721023350435, 0.0381150129275249, 8.852320940869428e-05, -6.0188223112872646e-05, -1.2500635799856844e-07, 3.4844384118047085e-08, 3.8381221954948864e-11, -6.7053067887057894e-12] ,[-9.814999221479582, 9.916437548957322, -6.234172462110239, 0.04971908717187111, 0.03811505992908011, 8.853295829984566e-05, -6.0188208407046795e-05, -1.2500635799856844e-07, 3.484454163556383e-08, 3.838128655655494e-11, -6.705304475532164e-12] ,[-9.81568911436734, 9.916431727154384, -6.233871059790812, 0.0497181283464157, 0.0381150129275249, 8.853058655877332e-05, -6.01882220518389e-05, -1.2500635799856844e-07, 3.484447282933586e-08, 3.838118230120197e-11, -6.705307781380356e-12] ,[-9.815931098791772, 9.894444135635727, -6.233871059790812, 0.04973329552688633, 0.03811501292762948, 8.853058607501704e-05, -6.0188222044171346e-05, -1.2500582528344557e-07, 3.48443374701548e-08, 3.838118230120197e-11, -6.705494440529899e-12] ,[-9.815930679699713, 9.892124136271159, -6.234118013459396, 0.04971721023350435, 0.0381150129275249, 8.853058607501704e-05, -6.018402030001682e-05, -1.2500635799856844e-07, 3.48445513208613e-08, 3.8364337205828076e-11, -6.705486786345662e-12] ]
    for i in initial_models:
        population.append(Individual(i))
    # population.append(Individual(first_individual))
    generation=0
    # while(len(population)<POPULATION_SIZE):
    #     x=create_gnome()
    #     population.append(Individual(x))
    # population = sorted(population, key = lambda x:x.fitness)
    # temp=5
    # while(temp):
    while(1):
        population = sorted(population, key = lambda x:x.fitness)
        child_population = []
        ## for adding the individuals with least fitness score. We need to sort based on fitness score??
        # child_population.extend(population[:5]) 
        probablity_array=[]
        fitness_sum=0
        for i in range(int((50*POPULATION_SIZE)/100)):
            fitness_sum=fitness_sum+population[i].fitness
        for i in range(int((50*POPULATION_SIZE)/100)):
            probablity_array.append(fitness_sum/population[i].fitness)
        for _ in range(int((90*POPULATION_SIZE)/100)): 
            # parents = random.choices(population[:int((50*POPULATION_SIZE)/100)],weights=probablity_array,cum_weights=None,k=2)
            parents=[]
            parents.append(random.choice(population[:int((50*POPULATION_SIZE)/100)]))
            parents.append(random.choice(population[:int((50*POPULATION_SIZE)/100)]))
            child = parents[0].mate(parents[1])
            child_population.append(Individual(child))

        for i in range((POPULATION_SIZE-int((90*POPULATION_SIZE)/100))):
            child_population.append(population[i])
        for i in range(int((20*POPULATION_SIZE)/100)):
            print(str(i)+str(len(child_population))+str(len(population))+submit(ID,population[i].chromosome))

        population = child_population
        # temp=temp-1
        generation=generation+1
        print(generation,end=' ')
        # print(probablity_array)

if __name__ == '__main__': 
    main()